<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fifteen的博客</title>
  <subtitle>内心细腻，胆大心细的十五君</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-21T09:28:36.452Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zengyimin</name>
    <email>448148187@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端工程师如何搞定设计</title>
    <link href="http://yoursite.com/2016/09/21/about-update/"/>
    <id>http://yoursite.com/2016/09/21/about-update/</id>
    <published>2016-09-21T07:54:00.000Z</published>
    <updated>2016-09-21T09:28:36.452Z</updated>
    
    <content type="html"><![CDATA[<p>前端是一个承上启下的职位，正因为其位置的特殊性导致其必须了解设计和后台的一些基本知识。本文并非教大家如何取代设计的工作，而是讲解前端如何更快更便捷的实现一些简单的设计任务，在没有设计师的情况下如何利用工具解决UI呈现的问题，让工作事半功倍。<br><a id="more"></a><br>Photoshop使用 大多数前端工程师都有过切图的经历，也就是将设计师制作的PSD等格式的图片按照需求切成项目需要的大小并实现页面的呈现，那么作为一名合格的前端工程师，我们有必要了解并熟练的掌握Photoshop的一些功能，下面介绍下几个实用的Photoshop技巧（以Adobe Photoshop CS5为例）。 1.调整图片大小 如果你在网络上找到了一张图片或者从设计师那里拿到一张图片用于网页中呈现，但是对图片的大小不满意的话，你只需要利用Photoshop进行调整即可，步骤很简单，如下： （1）利用Photoshop打开图片并点击“图像” -&gt; 选择“图像大小”<br> <img src="http://img.mukewang.com/57e103470001939c07470559.png" alt="原图 by muke"><br>（2）修改你想要的宽度和高度<br>  <img src="http://img.mukewang.com/57e1036500017fa207480548.png" alt="原图 by muke"><br> 这里我们一般修改像素大小即可，修改的时候如果不勾选下方的“约束比例”，那么图像可能会被拉扯变形，勾上可以防止宽高比例的失调，即在原图比例的基础上缩放。 2.调整局部颜色 如果我们需要对图片的局部颜色进行更改，比如我想将下方图片的背景变为黑色，我们可以点击“选择” -&gt; “色彩范围” -&gt; 选中背景区域 -&gt; 调整颜色容差即可<br> （1）选择范围<br> <img src="http://img.mukewang.com/57e1037d0001471a08000464.png" alt="原图 by muke"><br> （2）点击确定后，填充颜色<br>  <img src="http://img.mukewang.com/57e1038600015e0407780548.png" alt="原图 by muke"><br>  当然除了使用“色彩范围”外，还可以使用“索套工具”或者“选择工具”来建立选区，这里就不做介绍了，建立复杂的选区也需要相对复杂的操作。 3.一键切图 切图应该说是前端经常要做的事情，在切图的过程中如果遇到图层过于复杂图片又过于渺小的情况，我们往往需要放大整个图片并隐藏额外的图层来选择我们需要的图形区域，这相当的浪费时间和精力。这里介绍下我们如何通过Photoshop的动作功能来实现一键切图的效果。<br>  （1）下载动作 请戳这里下载动作文件：<br>  <a href="http://note.youdao.com/yws/pu" target="_blank" rel="external">http://note.youdao.com/yws/pu</a><br>  （2）载入动作<br> <img src="http://img.mukewang.com/57e103980001160603480513.png" alt="原图 by muke"><br> 将刚刚下载的动作文件载入即可<br> （3）使用动作 载入完成后，打开任一psd文件，步骤如下：<br>  a.首先我们选择“移动工具”，将“自动选择”勾选<br>  b.点击我们要切的图标，在图层面板中我们可以看到对应的图层已经被定位到<br>  c.按下F2，图标就成功切到了<br>  d.按下F3保存为web所用格式<br>  <img src="http://img.mukewang.com/57e103ac00011a8a08000405.png" alt="原图 by muke"><br>  <img src="http://img.mukewang.com/57e103bb0001ba3b08000421.png" alt="原图 by muke"><br>  关于Photoshop的技巧还有很多，以上只列出几个对于前端来说比较常用的三个，只要我们熟悉像这样的一些实用技巧，就可以节省很大的时间和精力。<br>  工具及网站使用<br>  1.图片压缩 如果你想要压缩一张图片，除了利用Photoshop修改品质外，我们还可以利用一些自动化工具进行压缩，比如glup、grunt等。 当你不具备以上开发环境和工具时，我这里推荐一个压缩图片的网站，地址为：<a href="https://tinypng.com/。" target="_blank" rel="external">https://tinypng.com/。</a> 其采用了智能的有损压缩技术，通过选择性地降低在图像中的颜色的数量，减少字节的存储数据量，其效果是几乎看不见，但它可以很大程度的减少图片的大小。<br> 2.图标下载 很多时候当我们的团队中缺乏设计或者设计不在时，如果项目中需要一个logo或者图标，我们其实可以自己搞定。通过百度搜到的图片大都不符合我们的需求，这里我推荐一个比较好用的图标库easyicon，拥有海量的图标资源，地址为：<a href="http://www.easyicon.net/" target="_blank" rel="external">http://www.easyicon.net/</a><br> 如下图所示，我们只需要输入我们需要的图标名称，便可以搜索出大量图标：<br> <img src="http://img.mukewang.com/57e103e50001613108000347.jpg" alt="原图 by muke"><br> 我们选择需要的图标时，会出现详细的下载页，我们可以选择我们需要的图标格式比如PNG、ICO或者ICONS，同时我们还可以选择需要的图标大小进行下载，如下：<br>  <img src="http://img.mukewang.com/57e103f20001b3c108000429.jpg" alt="原图 by muke"><br> 相信只需这一个网站就可以满足你的图标需求了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端是一个承上启下的职位，正因为其位置的特殊性导致其必须了解设计和后台的一些基本知识。本文并非教大家如何取代设计的工作，而是讲解前端如何更快更便捷的实现一些简单的设计任务，在没有设计师的情况下如何利用工具解决UI呈现的问题，让工作事半功倍。&lt;br&gt;
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="PSD" scheme="http://yoursite.com/tags/PSD/"/>
    
  </entry>
  
  <entry>
    <title>表单提交对象--FormDate</title>
    <link href="http://yoursite.com/2016/09/13/about-FormDate/"/>
    <id>http://yoursite.com/2016/09/13/about-FormDate/</id>
    <published>2016-09-13T04:30:00.000Z</published>
    <updated>2016-09-13T06:04:09.564Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中的个人中心涉及大量表单的提交，为方便ajax提交数据到后台，利用FormData对象,你可以使用一系列的键值对来模拟一个完整的表单,然后使用XMLHttpRequest发送这个”表单”.</p>
<a id="more"></a>
<p>1.创建一个FormData对象</p>
<p>你可以先创建一个空的FormData对象,然后使用append()方法向该对象里添加字段,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var oMyForm = new FormData();</div><div class="line"></div><div class="line">oMyForm.append(&quot;username&quot;, &quot;Groucho&quot;);</div><div class="line">oMyForm.append(&quot;accountnum&quot;, 123456); // 数字123456被立即转换成字符串&quot;123456&quot;</div><div class="line"></div><div class="line">// fileInputElement中已经包含了用户所选择的文件</div><div class="line">oMyForm.append(&quot;userfile&quot;, fileInputElement.files[0]);</div><div class="line"></div><div class="line">var oFileBody = &quot;&lt;a id=&quot;a&quot;&gt;&lt;b id=&quot;b&quot;&gt;hey!&lt;/b&gt;&lt;/a&gt;&quot;; // Blob对象包含的文件内容</div><div class="line">var oBlob = new Blob([oFileBody], &#123; type: &quot;text/xml&quot;&#125;);</div><div class="line"></div><div class="line">oMyForm.append(&quot;webmasterfile&quot;, oBlob);</div><div class="line"></div><div class="line">var oReq = new XMLHttpRequest();</div><div class="line">oReq.open(&quot;POST&quot;, &quot;http://foo.com/submitform.php&quot;);</div><div class="line">oReq.send(oMyForm);</div></pre></td></tr></table></figure></p>
<p>注: 字段”userfile”和”webmasterfile”的值都包含了一个文件.通过 FormData.append()方法赋给字段”accountnum”的数字被自动转换为字符(字段的值可以是一个Blob对象,一个File对象,或者一个字符串,剩下其他类型的值都会被自动转换成字符串).</p>
<p>在该例子中,我们创建了一个名为oMyForm的FormData对象,该对象中包含了名为”username”, “accountnum”, “userfile” 以及 “webmasterfile”的字段名,然后使用XMLHttpRequest的send()方法把这些数据发送了出去.”webmasterfile”字段的值不是一个字符串,还是一个Blob对象.</p>
<p>2.使用HTML表单来初始化一个FormData对象</p>
<p>可以用一个已有的<form>元素来初始化FormData对象,只需要把这个form元素作为参数传入FormData构造函数即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var newFormData = new FormData(someFormElement);</div><div class="line"></div><div class="line">var formElement = document.getElementById(&quot;myFormElement&quot;);</div><div class="line">var oReq = new XMLHttpRequest();</div><div class="line">oReq.open(&quot;POST&quot;, &quot;submitform.php&quot;);</div><div class="line">oReq.send(new FormData(formElement));</div></pre></td></tr></table></figure></form></p>
<p>你还可以在已有表单数据的基础上,继续添加新的键值对,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var formElement = document.getElementById(&quot;myFormElement&quot;);</div><div class="line">formData = new FormData(formElement);</div><div class="line">formData.append(&quot;serialnumber&quot;, serialNumber++);</div><div class="line">oReq.send(formData);</div></pre></td></tr></table></figure></p>
<p>你可以通过这种方式添加一些不想让用户编辑的固定字段,然后再发送.</p>
<p>3.使用FormData对象发送文件<br>你还可以使用FormData来发送二进制文件.首先在HTML中要有一个包含了文件输入框的form元素:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;form enctype=&quot;multipart/form-data&quot; method=&quot;post&quot; name=&quot;fileinfo&quot;&gt;</div><div class="line">  &lt;label&gt;Your email address:&lt;/label&gt;</div><div class="line">  &lt;input type=&quot;email&quot; autocomplete=&quot;on&quot; autofocus name=&quot;userid&quot; placeholder=&quot;email&quot; required size=&quot;32&quot; maxlength=&quot;64&quot; /&gt;&lt;br /&gt;</div><div class="line">  &lt;label&gt;Custom file label:&lt;/label&gt;</div><div class="line">  &lt;input type=&quot;text&quot; name=&quot;filelabel&quot; size=&quot;12&quot; maxlength=&quot;32&quot; /&gt;&lt;br /&gt;</div><div class="line">  &lt;label&gt;File to stash:&lt;/label&gt;</div><div class="line">  &lt;input type=&quot;file&quot; name=&quot;file&quot; required /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;a href=&quot;javascript:sendForm()&quot;&gt;Stash the file!&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>然后你就可以使用下面的代码来异步的上传用户所选择的文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function sendForm() &#123;</div><div class="line">  var oOutput = document.getElementById(&quot;output&quot;);</div><div class="line">  var oData = new FormData(document.forms.namedItem(&quot;fileinfo&quot;));</div><div class="line"></div><div class="line">  oData.append(&quot;CustomField&quot;, &quot;This is some extra data&quot;);</div><div class="line"></div><div class="line">  var oReq = new XMLHttpRequest();</div><div class="line">  oReq.open(&quot;POST&quot;, &quot;stash.php&quot;, true);</div><div class="line">  oReq.onload = function(oEvent) &#123;</div><div class="line">    if (oReq.status == 200) &#123;</div><div class="line">      oOutput.innerHTML = &quot;Uploaded!&quot;;</div><div class="line">    &#125; else &#123;</div><div class="line">      oOutput.innerHTML = &quot;Error &quot; + oReq.status + &quot; occurred uploading your file.&lt;br \/&gt;&quot;;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  oReq.send(oData);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你还可以不借助HTML表单,直接向FormData对象中添加一个File对象或者一个Blob对象:</p>
<p>data.append(“myfile”, myBlob);<br>如果FormData对象中的某个字段值是一个Blob对象,则在发送http请求时,代表该Blob对象所包含文件的文件名的”Content-Disposition”请求头的值在不同的浏览器下有所不同,Firefox使用了固定的字符串”blob,”而Chrome使用了一个随机字符串.</p>
<p>你还可以使用jQuery来发送FormData,但必须要正确的设置相关选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var fd = new FormData(document.getElementById(&quot;fileinfo&quot;));</div><div class="line">fd.append(&quot;CustomField&quot;, &quot;This is some extra data&quot;);</div><div class="line">$.ajax(&#123;</div><div class="line">  url: &quot;stash.php&quot;,</div><div class="line">  type: &quot;POST&quot;,</div><div class="line">  data: fd,</div><div class="line">  processData: false,  // 告诉jQuery不要去处理发送的数据</div><div class="line">  contentType: false   // 告诉jQuery不要去设置Content-Type请求头</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中的个人中心涉及大量表单的提交，为方便ajax提交数据到后台，利用FormData对象,你可以使用一系列的键值对来模拟一个完整的表单,然后使用XMLHttpRequest发送这个”表单”.&lt;/p&gt;
    
    </summary>
    
      <category term="经验" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="form" scheme="http://yoursite.com/tags/form/"/>
    
  </entry>
  
  <entry>
    <title>jsp之servlet初识</title>
    <link href="http://yoursite.com/2016/09/08/about-servlet/"/>
    <id>http://yoursite.com/2016/09/08/about-servlet/</id>
    <published>2016-09-08T02:30:00.000Z</published>
    <updated>2016-09-08T06:52:45.336Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天，天气阴晴不定，雨时断时续，心情也是不太好，老是犯困，效率也不太高，看来是放松了自己，肚子上的肉还是没有减下来，学习的动力也没有以前足了。看到妹子在备战即将到来的教</p>
<p>师资格证的考试，心里也是对自己的放松感到愧疚，那就学习吧。前段时间学习了web请求的类型，以及请求和响应的相关知识。现在大部分针对的都是B/</p>
<p>S结构的，通过浏览器去与用户交互。现在更深入的去了解下整个请求响应的过程。</p>
<a id="more"></a>
<p>现在我们已经通过MyEclipse新建了一个web-project，src目录里面存放servlet相关java文件，在容器配置好后，将会编译后存放在webapps-webINF-classes里面。WebRoot目录下放置资源文件，也会存放在容器webapps中。<br>接下来我们来分析下一个请求怎样输出在浏览器，以简单的登录注册为例。首先，在浏览器访问一个地址localhost:8080/blog/login;然后请求会在web.xml文件中解析，里面servlet映射里面的url-partting有没有对应的/login地址，有的话找出对应的servlet-name，然后根据servlet-name（servlet注册）找到对应的包下面的servlet程序地址，然后执行doGet或者doPost方法。</p>
<p>具体实现代码：<br>LoginResServlet.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line">package com.xieth.javaweb;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.PrintWriter;</div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.Statement;</div><div class="line">import javax.servlet.ServletConfig;</div><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.http.HttpServlet;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">public class LoginResServlet extends HttpServlet &#123;</div><div class="line">    sqlDemo sqlD = null;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void init(ServletConfig config) throws ServletException &#123;</div><div class="line">        try &#123;</div><div class="line">            sqlD = new sqlDemo();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">            throws ServletException, IOException &#123;</div><div class="line">        resp.setContentType(&quot;text/html;charset=utf-8&quot;);</div><div class="line">        req.setCharacterEncoding(&quot;utf-8&quot;);</div><div class="line">        String action = req.getParameter(&quot;action&quot;);</div><div class="line">        PrintWriter out = resp.getWriter();</div><div class="line"></div><div class="line">        // 注册</div><div class="line">        if (action.equals(&quot;Register&quot;)) &#123;</div><div class="line">            String name = req.getParameter(&quot;name&quot;);</div><div class="line">            String password = req.getParameter(&quot;password&quot;);</div><div class="line">            String passwordProblm = req.getParameter(&quot;passwordProblem&quot;);</div><div class="line">            String problemResult = req.getParameter(&quot;problemResult&quot;);</div><div class="line">            boolean isEmpty = (name != null &amp;&amp; !name.equals(&quot;&quot;)</div><div class="line">                    &amp;&amp; password != null &amp;&amp; !password.equals(&quot;&quot;)</div><div class="line">                    &amp;&amp; passwordProblm != null &amp;&amp; !passwordProblm.equals(&quot;&quot;)</div><div class="line">                    &amp;&amp; problemResult != null &amp;&amp; !problemResult.equals(&quot;&quot;));</div><div class="line">            System.out.println(isEmpty);</div><div class="line">            if (isEmpty) &#123;</div><div class="line">                try &#123;</div><div class="line">                    boolean flag = sqlD.InsertData(name, password,</div><div class="line">                            passwordProblm, problemResult);</div><div class="line">                    if (flag) &#123;</div><div class="line">                        out.println(&quot;&lt;h1&gt;恭喜你&quot; + name</div><div class="line">                                + &quot;:注册成功点击&lt;a href=&apos;login.html&apos;&gt;登录&lt;/a&gt;&lt;/h1&gt;&quot;);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        out.println(&quot;&lt;h1&gt;Soory&quot;</div><div class="line">                                + name</div><div class="line">                                + &quot;:注册失败,该用户已经存在,点击&lt;a href=&apos;Register.html&apos;&gt;重新注册&lt;/a&gt;&lt;/h1&gt;&quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                out.println(&quot;&lt;h1&gt;所以选项均不可以为空！！！点击&lt;a href=&apos;Register.html&apos;&gt;重新注册&lt;/h1&gt;&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; else &#123; // 登录</div><div class="line">            String name = req.getParameter(&quot;name&quot;);</div><div class="line">            String password = req.getParameter(&quot;password&quot;);</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                boolean flag = sqlD.LoginCorrect(name, password);</div><div class="line">                if (flag) &#123;</div><div class="line">                    out.println(&quot;&lt;h1&gt;欢迎你:&quot; + name + &quot;&lt;/h1&gt;&quot;);</div><div class="line">                &#125; else &#123;</div><div class="line">                    out.println(&quot;&lt;h1&gt;SOrry密码错误！点击重新&lt;a href=&apos;login.html&apos;&gt;登录&lt;/a&gt;&lt;/h1&gt;&quot;);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">            throws ServletException, IOException &#123;</div><div class="line">        this.doGet(req, resp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class sqlDemo &#123;</div><div class="line"></div><div class="line">    private Connection conn = null;</div><div class="line">    private Statement statement = null;</div><div class="line"></div><div class="line">    public sqlDemo() throws Exception &#123;</div><div class="line">        conn = getConnection();</div><div class="line">        statement = conn.createStatement();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 查看登录用户名和密码是否正确</div><div class="line">    public boolean LoginCorrect(String name, String password) throws Exception &#123;</div><div class="line">        String sql = &quot;select * from logindemo where name = &apos;&quot; + name + &quot;&apos;&quot;;</div><div class="line">        ResultSet rs = statement.executeQuery(sql);</div><div class="line">        // 查看是否合法</div><div class="line">        while (rs.next()) &#123;</div><div class="line">            if (name.equals(rs.getString(&quot;name&quot;))</div><div class="line">                    &amp;&amp; password.equals(rs.getString(&quot;password&quot;)))</div><div class="line">                return true;</div><div class="line">        &#125;</div><div class="line">        rs.close();</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 插入数据</div><div class="line">    public boolean InsertData(String name, String password,</div><div class="line">            String passwordProblm, String problemResult) throws Exception &#123;</div><div class="line">        String sql = &quot;insert into logindemo values (&apos;&quot; + name + &quot;&apos;,&apos;&quot;</div><div class="line">                + password + &quot;&apos;,&apos;&quot; + passwordProblm + &quot;&apos;,&apos;&quot; + problemResult</div><div class="line">                + &quot;&apos;)&quot;;</div><div class="line">        String isAgainSql = &quot;select name from logindemo where name = &apos;&quot; + name</div><div class="line">                + &quot;&apos;&quot;;</div><div class="line">        ResultSet rs = statement.executeQuery(isAgainSql);</div><div class="line">        // 查看是否用户名重复</div><div class="line">        while (rs.next()) &#123;</div><div class="line">            if (rs.getString(&quot;name&quot;).equals(name)) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        statement.executeUpdate(sql);</div><div class="line">        rs.close();</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Connection getConnection() throws Exception &#123;</div><div class="line">        String driverClass = &quot;com.mysql.jdbc.Driver&quot;;</div><div class="line">        String url = &quot;jdbc:mysql:///hello?useUnicode=true&amp;characterEncoding=utf8&quot;;</div><div class="line">        String user = &quot;root&quot;;</div><div class="line">        String password = &quot;123456&quot;;</div><div class="line"></div><div class="line">        // 注册加载驱动</div><div class="line">        Class.forName(driverClass);</div><div class="line"></div><div class="line">        // 获取连接</div><div class="line"></div><div class="line">        Connection conn = DriverManager.getConnection(url, user, password);</div><div class="line">        System.out.println(conn);</div><div class="line">        return conn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Register.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;form action=&quot;LoginResServlet&quot; method=&quot;post&quot;&gt;</div><div class="line"></div><div class="line">        用户名:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt; 密码:&lt;input type=&quot;password&quot;</div><div class="line">            name=&quot;password&quot;&gt; 密码找回问题:&lt;input type=&quot;text&quot;</div><div class="line">            name=&quot;passwordProblem&quot;&gt; 答案:&lt;input type=&quot;text&quot;</div><div class="line">            name=&quot;problemResult&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;</div><div class="line">        &lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;Register&quot;&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>login.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;form action=&quot;LoginResServlet&quot; method=&quot;post&quot;&gt;</div><div class="line">        用户名:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt; 密码:&lt;input type=&quot;password&quot;</div><div class="line">            name=&quot;password&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt; &lt;input</div><div class="line">            type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;login&quot;&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>web.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</div><div class="line">    id=&quot;WebApp_ID&quot; version=&quot;3.0&quot;&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">		&lt;!--servlet注册--&gt;</div><div class="line">        &lt;servlet-name&gt;LoginResServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;com.xieth.javaweb.LoginResServlet&lt;/servlet-class&gt;</div><div class="line"></div><div class="line">    &lt;/servlet&gt;</div><div class="line">	&lt;!-- servlet映射 --&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line"></div><div class="line">        &lt;servlet-name&gt;LoginResServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/LoginResServlet&lt;/url-pattern&gt;</div><div class="line"></div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天，天气阴晴不定，雨时断时续，心情也是不太好，老是犯困，效率也不太高，看来是放松了自己，肚子上的肉还是没有减下来，学习的动力也没有以前足了。看到妹子在备战即将到来的教&lt;/p&gt;
&lt;p&gt;师资格证的考试，心里也是对自己的放松感到愧疚，那就学习吧。前段时间学习了web请求的类型，以及请求和响应的相关知识。现在大部分针对的都是B/&lt;/p&gt;
&lt;p&gt;S结构的，通过浏览器去与用户交互。现在更深入的去了解下整个请求响应的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>js 基本类型与引用类型的区别</title>
    <link href="http://yoursite.com/2016/09/05/about-js-style/"/>
    <id>http://yoursite.com/2016/09/05/about-js-style/</id>
    <published>2016-09-05T07:30:00.000Z</published>
    <updated>2016-09-05T08:44:24.259Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScirpt 变量有两种不同的数据类型：基本类型，引用类型。也有其他的叫法，比如原始类型和对象类型，拥有方法的类型和不能拥有方法的类型，还可以分为可变类型和不可变类型，其实这些叫法都是依据这两种的类型特点来命名的，大家爱叫啥就叫啥吧 o(╯□╰)o 。<br><a id="more"></a></p>
<p>1.基本类型</p>
<p>基本的数据类型有：`undefined，boolean，number，string，null.基本类型的访问是按值访问的，就是说你可以操作保存在变量中的实际的值。<br>基本类型有以下几个特点：</p>
<p>1.基本类型的值是不可变得：<br>任何方法都无法改变一个基本类型的值，比如一个字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var name = &apos;jozo&apos;;</div><div class="line">name.toUpperCase(); // 输出 &apos;JOZO&apos;</div><div class="line">在调用方法的时候，String(&apos;jozo&apos;),调用结束后，js抛弃包装器对象，返回字面量类型。</div><div class="line">console.log(name); // 输出  &apos;jozo&apos;</div></pre></td></tr></table></figure></p>
<p>会发现原始的name并未发生改变，而是调用了toUpperCase()方法后返回的是一个新的字符串。<br>再来看个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var person = &apos;jozo&apos;;</div><div class="line">person.age = 22;</div><div class="line">person.method = function()&#123;//...&#125;;</div><div class="line"></div><div class="line">console.log(person.age); // undefined</div><div class="line">console.log(person.method); // undefined</div></pre></td></tr></table></figure></p>
<p>通过上面代码可知，我们不能给基本类型添加属性和方法，再次说明基本类型是不可变的；</p>
<p>2.基本类型的比较是值的比较：</p>
<p>只有在它们的值相等的时候它们才相等。<br>但你可能会这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = true;</div><div class="line">console.log(a == b);//true</div></pre></td></tr></table></figure></p>
<p>它们不是相等吗？其实这是类型转换和 == 运算符的知识了，也就是说在用==比较两个不同类型的变量时会进行一些类型转换。像上面的比较先会把true<br>转换为数字1再和数字1进行比较，结果就是true了。 这是当比较的两个值的类型不同的时候==运算符会进行类型转换，但是当两个值的类型相同的时候，<br>即使是==也相当于是===。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = &apos;jozo&apos;;</div><div class="line">var b = &apos;jozo&apos;;</div><div class="line">console.log(a === b);//true</div></pre></td></tr></table></figure></p>
<p>3.基本类型的变量是存放在栈区的（栈区指内存里的栈内存）</p>
<p>假如有以下几个基本类型的变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var name = &apos;jozo&apos;;</div><div class="line">var city = &apos;guangzhou&apos;;</div><div class="line">var age = 22;</div></pre></td></tr></table></figure></p>
<p>那么它的存储结构如下图：<br><img src="http://cdn.attach.w3cfuns.com/notes/pics/201605/05/180113pm4d2ajmtg4vvvth.png" alt="by internet"></p>
<p>2.引用类型</p>
<p>引用类型会比较好玩有趣一些。</p>
<p>javascript中除了上面的基本类型(number,string,boolean,null,undefined)之外就是引用类型了，也可以说是就是对象了。对象是属性和方法的集合。<br>也就是说引用类型可以拥有属性和方法，属性又可以包含基本类型和引用类型。来看看引用类型的一些特性：</p>
<p>1.引用类型的值是可变的</p>
<p>我们可为为引用类型添加属性和方法，也可以删除其属性和方法，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var person = &#123;&#125;;//创建个控对象 --引用类型</div><div class="line">person.name = &apos;jozo&apos;;</div><div class="line">person.age = 22;</div><div class="line">person.sayName = function()&#123;console.log(person.name);&#125; </div><div class="line">person.sayName();// &apos;jozo&apos;</div><div class="line"></div><div class="line">delete person.name; //删除person对象的name属性</div><div class="line">person.sayName(); // undefined</div></pre></td></tr></table></figure></p>
<p>上面代码说明引用类型可以拥有属性和方法，并且是可以动态改变的。</p>
<p>2.引用类型的值是同时保存在栈内存和堆内存中的对象</p>
<p>javascript和其他语言不同，其不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间，那我们操作啥呢？ 实际上，是操作对象的引用，<br>所以引用类型的值是按引用访问的。<br>准确地说，引用类型的存储需要内存的栈区和堆区（堆区是指内存里的堆内存）共同完成，栈区内存保存变量标识符和指向堆内存中该对象的指针，<br>也可以说是该对象在堆内存的地址。<br>假如有以下几个对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var person1 = &#123;name:&apos;jozo&apos;&#125;;</div><div class="line">var person2 = &#123;name:&apos;xiaom&apos;&#125;;</div><div class="line">var person3 = &#123;name:&apos;xiaoq&apos;&#125;;</div></pre></td></tr></table></figure></p>
<p>则这三个对象的在内存中保存的情况如下图：<br><img src="http://cdn.attach.w3cfuns.com/notes/pics/201605/05/180349ojjqtqbb0u9fk0j6.png" alt="by internet"><br>3.引用类型的比较是引用的比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var person1 = &apos;&#123;&#125;&apos;;</div><div class="line">var person2 = &apos;&#123;&#125;&apos;;</div><div class="line">console.log(person1 == person2); // true</div></pre></td></tr></table></figure></p>
<p>上面讲基本类型的比较的时候提到了当两个比较值的类型相同的时候，相当于是用 === ，所以输出是true了。再看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var person1 = &#123;&#125;;</div><div class="line">var person2 = &#123;&#125;;</div><div class="line">console.log(person1 == person2); // false</div></pre></td></tr></table></figure></p>
<p>可能你已经看出破绽了，上面比较的是两个字符串，而下面比较的是两个对象，为什么长的一模一样的对象就不相等了呢？</p>
<p>别忘了，引用类型时按引用访问的，换句话说就是比较两个对象的堆内存中的地址是否相同，那很明显，person1和person2在堆内存中地址是不同的：</p>
<p><img src="http://cdn.attach.w3cfuns.com/notes/pics/201605/05/180349ctcarcqqrlzlaogd.png" alt="by internet"></p>
<p>所以这两个是完全不同的对象，所以返回false;<br>3.简单赋值</p>
<p>在从一个变量向另一个变量赋值基本类型时，会在该变量上创建一个新值，然后再把该值复制到为新变量分配的位置上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">var b = a;</div><div class="line"></div><div class="line">a ++ ;</div><div class="line">console.log(a); // 11</div><div class="line">console.log(b); // 10</div></pre></td></tr></table></figure></p>
<p>此时，a中保存的值为 10 ，当使用 a 来初始化 b 时，b 中保存的值也为10，但b中的10与a中的是完全独立的，该值只是a中的值的一个副本，此后，<br>这两个变量可以参加任何操作而相互不受影响。</p>
<p>也就是说基本类型在赋值操作后，两个变量是相互不受影响的。<br><img src="http://cdn.attach.w3cfuns.com/notes/pics/201605/05/180532kj85we8zaqfipigq.png" alt="by internet"></p>
<p>4.对象引用</p>
<p>当从一个变量向另一个变量赋值引用类型的值时，同样也会将存储在变量中的对象的值复制一份放到为新变量分配的空间中。前面讲引用类型的时候提到，<br>保存在变量中的是对象在堆内存中的地址，所以，与简单赋值不同，这个值的副本实际上是一个指针，而这个指针指向存储在堆内存的一个对象。那么赋值操作后，<br>两个变量都保存了同一个对象地址，则这两个变量指向了同一个对象。因此，改变其中任何一个变量，都会相互影响：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var a = &#123;&#125;; // a保存了一个空对象的实例</div><div class="line">var b = a;  // a和b都指向了这个空对象</div><div class="line"></div><div class="line">a.name = &apos;jozo&apos;;</div><div class="line">console.log(a.name); // &apos;jozo&apos;</div><div class="line">console.log(b.name); // &apos;jozo&apos;</div><div class="line"></div><div class="line">b.age = 22;</div><div class="line">console.log(b.age);// 22</div><div class="line">console.log(a.age);// 22</div><div class="line"></div><div class="line">console.log(a == b);// true</div></pre></td></tr></table></figure></p>
<p>它们的关系如下图：<br><img src="http://cdn.attach.w3cfuns.com/notes/pics/201605/05/180349yv99vsfs7yfsfysh.png" alt="by internet"></p>
<p>因此，引用类型的赋值其实是对象保存在栈区地址指针的赋值，因此两个变量指向同一个对象，任何的操作都会相互影响。</p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMAScirpt 变量有两种不同的数据类型：基本类型，引用类型。也有其他的叫法，比如原始类型和对象类型，拥有方法的类型和不能拥有方法的类型，还可以分为可变类型和不可变类型，其实这些叫法都是依据这两种的类型特点来命名的，大家爱叫啥就叫啥吧 o(╯□╰)o 。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>设计之初确定下来的规范--避免风格不统一</title>
    <link href="http://yoursite.com/2016/09/01/about-design/"/>
    <id>http://yoursite.com/2016/09/01/about-design/</id>
    <published>2016-09-01T05:30:00.000Z</published>
    <updated>2016-09-01T05:50:49.705Z</updated>
    
    <content type="html"><![CDATA[<p>在一个产品设计之初，最重要的是确定好统一的风格，也就是固定下来的common的css（根据确定的风格去确定）。<br>而一个好的规范是非常重要的。<br><a id="more"></a></p>
<p>1.先确定设计尺寸，切图规范。</p>
<p>2.接下来从标准色–标准字–图标–按钮–模块–布局来打造完整的一个产品风格<br><img src="http://img.ui.cn/data/file/5/9/3/786395.png?imageMogr2/auto-orient/format/jpg/strip/thumbnail/!900%3E/quality/90/" alt="by meixin"></p>
<p>3.app1.0设计方案<br><img src="http://img.ui.cn/data/file/5/6/3/786365.png?imageMogr2/auto-orient/format/jpg/strip/thumbnail/!900%3E/quality/90/" alt="by meixin"></p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个产品设计之初，最重要的是确定好统一的风格，也就是固定下来的common的css（根据确定的风格去确定）。&lt;br&gt;而一个好的规范是非常重要的。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="design" scheme="http://yoursite.com/tags/design/"/>
    
      <category term="experience" scheme="http://yoursite.com/tags/experience/"/>
    
  </entry>
  
  <entry>
    <title>pc端js插件superslider</title>
    <link href="http://yoursite.com/2016/08/30/pc-animate/"/>
    <id>http://yoursite.com/2016/08/30/pc-animate/</id>
    <published>2016-08-30T02:58:00.000Z</published>
    <updated>2016-08-31T06:41:33.827Z</updated>
    
    <content type="html"><![CDATA[<p>对于是自己造轮子，还是使用别人已经造好的轮子的这个问题，我相信每个人都有自己的理解。我的理解是看业务场景，有些可以复用的功能可以引用造好的轮子，毕竟github上面点赞多的都是经</p>
<p>过了许许多多人的验证的，确实好用。<br><a id="more"></a></p>
<p>今天看到一加手机的论坛页有个产品banner和产品展示的导航，发现动画做的还是很流畅的，就花时间研究了下是如果做的，然后就发现是引用了superSlider这个插件。</p>
<p>superSlider现在的最新版本是2.1;SuperSlide 致力于解决网站大部分特效展示问题，使网站代码规范整洁，方便维护更新。</p>
<p>网站上常用的“焦点图/幻灯片”“Tab标签切换”“图片滚动”“无缝滚动”等只需要一个SuperSlide即可解决！</p>
<p>superSlider高级部分的功能需要收费，不过我们基本上也只是用到基础功能就可以实现大部分网站比较简单的特效了，这个插件的主要功能是内容的切换，图片的切换以及展示。</p>
<p>这里是他的官网<a href="http://www.superslide2.com/；里面有demo可以让你去了解。" target="_blank" rel="external">http://www.superslide2.com/；里面有demo可以让你去了解。</a></p>
<p>这个插件的参数是比较多的<a href="http://www.superslide2.com/param.html；但是也比较好理解。" target="_blank" rel="external">http://www.superslide2.com/param.html；但是也比较好理解。</a></p>
<p>插件的介绍到这里，我们具体来看看如何在实际运用中使用该插件。</p>
<p>上代码时间到，哈哈哈。<br>1.页面结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;portal_block_198&quot; class=&quot;block move-span&quot;&gt;</div><div class="line">			&lt;div id=&quot;portal_block_198_content&quot; class=&quot;dxb_bc&quot;&gt;</div><div class="line">				&lt;div class=&quot;dfsj_yjsh&quot;&gt;</div><div class="line">					&lt;a class=&quot;prev&quot;&gt;&lt;/a&gt;</div><div class="line">					&lt;a class=&quot;next&quot;&gt;&lt;/a&gt;</div><div class="line">					&lt;div class=&quot;tempWrap&quot; style=&quot;overflow:hidden; position:relative; width:627px&quot;&gt;</div><div class="line">						&lt;ul class=&quot;dfsj_imgs clear&quot; style=&quot;width: 2090px; position: relative; overflow: hidden; padding: 0px; margin: 0px; left: -1045px;&quot;&gt;</div><div class="line">							&lt;li class=&quot;clone&quot; style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2884295-1-1.html&quot; target=&quot;_blank&quot; title=&quot;撩妹大法&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143640uvuyn8pgwxdvxnpg.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143640uvuyn8pgwxdvxnpg.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;撩妹大法&quot; style=&quot;display: inline;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;撩妹大法&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2888026-1-1.html&quot; target=&quot;_blank&quot; title=&quot;香港旅行摄影&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143434sylwg4j2gmwdlj1l.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143434sylwg4j2gmwdlj1l.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;香港旅行摄影&quot; style=&quot;display: inline;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;香港旅行摄影&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2887688-1-1.html&quot; target=&quot;_blank&quot; title=&quot;素颜照片&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143501mllckwkbfkmc8ez7.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143501mllckwkbfkmc8ez7.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;素颜照片&quot; style=&quot;display: inline;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;素颜照片&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2887408-1-1.html&quot; target=&quot;_blank&quot; title=&quot;日常＂余晖＂&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143532a5cebmnef5qf5wee.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143532a5cebmnef5qf5wee.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;日常＂余晖＂&quot; style=&quot;display: inline;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;日常＂余晖＂&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2887283-1-1.html&quot; target=&quot;_blank&quot; title=&quot;漫游上下九&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143555uffc73pf322sdvwb.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143555uffc73pf322sdvwb.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;漫游上下九&quot; style=&quot;display: inline;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;漫游上下九&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2884633-1-1.html&quot; target=&quot;_blank&quot; title=&quot;一加一戈壁行&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143617su4mgy56utgg1gu1.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143617su4mgy56utgg1gu1.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;一加一戈壁行&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;一加一戈壁行&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2884295-1-1.html&quot; target=&quot;_blank&quot; title=&quot;撩妹大法&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143640uvuyn8pgwxdvxnpg.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143640uvuyn8pgwxdvxnpg.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;撩妹大法&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;撩妹大法&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;clone&quot; style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2888026-1-1.html&quot; target=&quot;_blank&quot; title=&quot;香港旅行摄影&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143434sylwg4j2gmwdlj1l.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143434sylwg4j2gmwdlj1l.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;香港旅行摄影&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;香港旅行摄影&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;clone&quot; style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2887688-1-1.html&quot; target=&quot;_blank&quot; title=&quot;素颜照片&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143501mllckwkbfkmc8ez7.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143501mllckwkbfkmc8ez7.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;素颜照片&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;素颜照片&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;clone&quot; style=&quot;float: left; width: 200px;&quot;&gt;&lt;a href=&quot;http://www.oneplusbbs.com/thread-2887408-1-1.html&quot; target=&quot;_blank&quot; title=&quot;日常＂余晖＂&quot;&gt;&lt;img class=&quot;dfsj_lazy&quot; src=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143532a5cebmnef5qf5wee.jpg&quot; data-original=&quot;http://static.oneplus.cn/data/attachment/portal/201608/19/143532a5cebmnef5qf5wee.jpg&quot; width=&quot;200&quot; height=&quot;130&quot; alt=&quot;日常＂余晖＂&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;日常＂余晖＂&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">						&lt;/ul&gt;</div><div class="line">					&lt;/div&gt;</div><div class="line">				&lt;/div&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>2.css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">*&#123;margin:0;padding:0&#125;</div><div class="line">ul li&#123;list-style:none;&#125;</div><div class="line">a&#123;color:#333;text-decoration:none;&#125;</div><div class="line">.clear:after&#123;content:&apos;&apos;;display:block;clear:both;&#125;</div><div class="line">.clear&#123;zoom:1;&#125;</div><div class="line">.dfsj_yjsh&#123;position:relative;width:618px;margin-left:12px;overflow:hidden;&#125;</div><div class="line">.dfsj_yjsh a.next,.dfsj_yjsh a.prev&#123;position:absolute;top:40px;display:block;width:26px;height:50px;background:url(http://static.oneplus.cn/dfsj_imgs/dfsj_yjshjt.png) no-repeat;z-index:1;&#125;</div><div class="line">.dfsj_yjsh a.prev&#123;left:0;background-position:0 0;&#125;</div><div class="line">.dfsj_yjsh a.next&#123;right:0;background-position:-26px 0;&#125;</div><div class="line">.dfsj_yjsh a.prev:hover&#123;background-position:0 -50px;&#125;</div><div class="line">.dfsj_yjsh a.next:hover&#123;background-position:-26px -50px;&#125;</div><div class="line">.dfsj_imgs li&#123;position:relative;float:right;width:200px;height:130px;margin:0 9px 0 0px;font:400 12px/12px &apos;Microsoft Yahei&apos;;&#125;</div><div class="line">.dfsj_imgs a,.dfsj_imgs a:visited&#123;color:#fff;&#125;</div><div class="line">.dfsj_imgs li img&#123;height:130px;width:200px;&#125;</div><div class="line">.dfsj_imgs span,.dfsj_imgs em&#123;position:absolute;left:0;bottom:0;width:200px;height:26px;line-height:26px;overflow:hidden;font-size:14px;text-align:center;&#125;</div><div class="line">.dfsj_imgs span&#123;background-color:#000;opacity:0.4;filter:alpha(opacity=40);&#125;</div></pre></td></tr></table></figure></p>
<p>3.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;.dfsj_yjsh&quot;).slide(&#123;mainCell:&quot;.dfsj_imgs&quot;,autoPage:true,effect:&quot;leftLoop&quot;,autoPlay:true,vis:3,delayTime:1000&#125;);</div></pre></td></tr></table></figure></p>
<p>到这里一个左右自动滚动带导航的图片展示就完成了，js需要去写的很简单，就是切换元素的包裹层对象的父元素（目标元素的父元素）去调用slider函数，函数带有一个对象参数，mainCell—切换元素的包裹层对象（切换的元素–目标元素），autopage–是否启动自动分页，effect—切换的效果，autoplay—是否自动切换，vis—visible缩写，mainCell的可视范围个数，当实际内容个数少于可视个数的时候，不执行SuperSlide效果，delaytime—-毫秒；切换效果持续时间（一次切换效果执行所用的时间长度）；</p>
<p>这里只是很简单的应用很分析，里面还有很多参数，可以对照demo去自己玩玩。</p>
<p>总之，这个插件可以很好的解决pc端切换类的特效，而移动端我一般是用swiper.js。当然插件或者轮子的使用要以业务场景作为基础，要不然再炫酷的轮子也是不适合的。</p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于是自己造轮子，还是使用别人已经造好的轮子的这个问题，我相信每个人都有自己的理解。我的理解是看业务场景，有些可以复用的功能可以引用造好的轮子，毕竟github上面点赞多的都是经&lt;/p&gt;
&lt;p&gt;过了许许多多人的验证的，确实好用。&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>jsp入门之二</title>
    <link href="http://yoursite.com/2016/08/26/jsp-two/"/>
    <id>http://yoursite.com/2016/08/26/jsp-two/</id>
    <published>2016-08-26T02:30:00.000Z</published>
    <updated>2016-08-26T03:56:26.343Z</updated>
    
    <content type="html"><![CDATA[<p> 上节讲到post和get两种常见的请求方式：</p>
<p> get提交时会将参数一起提交在浏览器地址栏，以”?”拼接，多个参数接上&amp;&amp;;<br> 在浏览器地址栏输入的url都是get请求，a链接也是以get请求方式去跳转的，还有一种常见的情景是from表单指定用get方式去提交。</p>
<p>post提交不会带参数显示在地址栏，但是在浏览器工具里面的from-data可以看到显示的数据，因此注册登录的秘密还是需求用到加密算法，以保护用户。<br><a id="more"></a><br>当通过http协议与服务器通信，服务器会返回一个状态码告诉浏览器，这个常见的状态码有助于我们更好的发现问题。</p>
<p>http响应：就是服务器对客户端的一个响应。<br>服务器做出响应的状态码如下：<br>    200 正常，请求处理正常<br>    404 资源文件找不到，你请求的页面不存在<br>    500 服务器出错或者请求和服务器之间断开了<br>    204 无内容<br>    302 重写响应中的url</p>
<p>前三个状态码是比较常见的，是需要掌握的。</p>
<p>了解了http请求和响应，那么我们来创建一个web项目。</p>
<p>首先准备工具，使用java开发工具：MyEclipse（Eclipse的插件版）+jdk1.6x（JDK 是整个Java的核心，包括了Java运行环境，Java工具和Java基础的类库）+tomcat6.x（web项目运行的容器）</p>
<p>然后打开Myeclipse，点击file，new web project</p>
<p>弹出new web project</p>
<p><img src="/assets/blogImg/new-projec.jpg" alt="截图"> </p>
<p>一般使用项目默认路径：Use Default location<br>javaEE version javaEE的版本<br>java version  java的版本–一般是jdk的版本<br>JSTL version 在 JSP 页面中，使用标签库代替传统的 Java 片段语言来实现页面的显示逻辑已经不是新技术了，然而，由自定义标签很容易造成重复定义和非标准的实现。鉴于此，出现了 JSTL （ JSP Standard Tag Library ）。大多数 JSP 页面逻辑提供了实现的 JSTL 技术，该技术本身就是一个标签库。</p>
<p>然后点击next，进入web模块<br><img src="/assets/blogImg/module.jpg" alt="截图"></p>
<p>然后点击finish完成web项目的创建。</p>
<p>接下来我们就可以看到Blog3这个web项目在工具里面的目录结构。<br>src–源文件目录<br>webRoot – web根目录（资源文件夹–用来存放网页解析相关的文件，如js，jsp，img，css，html等）<br>WEB-INF/lib 用来存放java类库</p>
<p>src是开发人员的编写的java文件放的位置，中间的文件夹名称也是由开发人员定义的，一般会分成数据层的，业务层的，控制层的，工具类的，基础信息类，配置文件等。<br>webroot则是开发人员编写的JSP页面、html页面、js、还有java需要的jar包导入的地方、以及web配置项所在的地方，中文件夹的名称也是由开发人员来定义的。</p>
<p>接下来就是使用tomcat容器运行这个web项目</p>
<p>浏览器的访问地址：<a href="http://localhost:8080/Blog3/index.jsp" target="_blank" rel="external">http://localhost:8080/Blog3/index.jsp</a></p>
<p>到这里，一个web项目就搭建成功了。</p>
<p>end. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 上节讲到post和get两种常见的请求方式：&lt;/p&gt;
&lt;p&gt; get提交时会将参数一起提交在浏览器地址栏，以”?”拼接，多个参数接上&amp;amp;&amp;amp;;&lt;br&gt; 在浏览器地址栏输入的url都是get请求，a链接也是以get请求方式去跳转的，还有一种常见的情景是from表单指定用get方式去提交。&lt;/p&gt;
&lt;p&gt;post提交不会带参数显示在地址栏，但是在浏览器工具里面的from-data可以看到显示的数据，因此注册登录的秘密还是需求用到加密算法，以保护用户。&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="jsp" scheme="http://yoursite.com/tags/jsp/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>妙味课堂网站动效demo</title>
    <link href="http://yoursite.com/2016/08/25/web-animate/"/>
    <id>http://yoursite.com/2016/08/25/web-animate/</id>
    <published>2016-08-25T09:30:00.000Z</published>
    <updated>2016-08-25T09:33:27.528Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到改版后妙味课堂的网站，有些动画特效很不错，就想着借鉴学习下。</p>
<p>首先是头部导航栏的特效，鼠标hover之后有logo的变化以及栏目的变化<br><a id="more"></a><br>先看html代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;nav&gt;</div><div class="line">	&lt;div class=&quot;nav_main clear&quot;&gt;</div><div class="line">		&lt;!-- logo布局 --&gt;	</div><div class="line">		&lt;div class=&quot;logo&quot;&gt;</div><div class="line">			&lt;a href=&quot;/&quot;&gt;</div><div class="line">				&lt;img src=&quot;http://www.miaov.com/static/normal/images/logo.png&quot; class=&quot;logoBg&quot; style=&quot;transform: scale(1);&quot;&gt;</div><div class="line">				&lt;div class=&quot;logoText&quot;&gt;</div><div class="line">					&lt;div class=&quot;text&quot;&gt;</div><div class="line">						&lt;img src=&quot;http://www.miaov.com/static/normal/images/miaov.png&quot; style=&quot;top: 0px;&quot;&gt;</div><div class="line">					&lt;/div&gt;</div><div class="line">					&lt;div class=&quot;text&quot;&gt;</div><div class="line">						&lt;img src=&quot;http://www.miaov.com/static/normal/images/miaov-cn.png&quot; style=&quot;top: 0px;&quot;&gt;</div><div class="line">					&lt;/div&gt;</div><div class="line">					&lt;div class=&quot;logoAll&quot; style=&quot;opacity: 0;&quot;&gt;&lt;/div&gt;</div><div class="line">					&lt;span style=&quot;left: 270px;&quot;&gt;&lt;/span&gt;</div><div class="line">				&lt;/div&gt;</div><div class="line">			&lt;/a&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">		&lt;!-- menu布局 --&gt;	</div><div class="line">		&lt;div class=&quot;menu&quot;&gt;</div><div class="line">			&lt;div class=&quot;box&quot; style=&quot;left: 0px; top: 0px; width: 64px; -webkit-filter: blur(0px);&quot;&gt;</div><div class="line">				&lt;div class=&quot;left&quot; style=&quot;width: 0px; left: 0px; background: rgb(225, 86, 113);&quot;&gt;&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;right&quot; style=&quot;width: 0px; right: 0px; background: url(&amp;quot;http://www.miaov.com/static/normal/images/nav_bg.gif&amp;quot;) repeat-x;&quot;&gt;&lt;/div&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">			&lt;ul&gt;</div><div class="line">				&lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class="line">				&lt;li&gt;&lt;a href=&quot;#&quot;&gt;课程&lt;/a&gt;&lt;/li&gt;</div><div class="line">                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;VIP会员&lt;/a&gt;&lt;/li&gt;</div><div class="line">				&lt;li&gt;&lt;a href=&quot;#&quot;&gt;学员作品&lt;/a&gt;&lt;/li&gt;</div><div class="line">                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class="line">				&lt;li&gt;&lt;a href=&quot;#&quot; target=&quot;_blank&quot;&gt;论坛&lt;/a&gt;&lt;/li&gt;</div><div class="line">				&lt;li&gt;&lt;a href=&quot;#&quot;&gt;留言&lt;/a&gt;&lt;/li&gt;</div><div class="line">			&lt;/ul&gt;</div><div class="line">           &lt;div class=&quot;loginBtn&quot;&gt;</div><div class="line">	           	&lt;a href=&quot;javascript:;&quot; data-showloginbox=&quot;javascript&quot;&gt;登录&lt;/a&gt;</div><div class="line">	           	&lt;a href=&quot;javascript:;&quot; data-showregbox=&quot;javascript&quot; class=&quot;last_login&quot;&gt;注册&lt;/a&gt;</div><div class="line">           &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/nav&gt;</div></pre></td></tr></table></figure></p>
<p>接下来是css代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">nav&#123;width:100%;height:41px;background:url(http://www.miaov.com/static/normal/images/nav_bg.gif) repeat-x;border-bottom:2px solid #e15671;position:relative;z-index:5;&#125;</div><div class="line">nav .nav_main&#123;width:1050px;height:auto;position:relative;left:50%;margin-left:-525px;z-index:5;&#125;</div><div class="line">nav .nav_main .logo&#123;width:249px;height:131px;position:absolute;top:0;left:0;&#125;</div><div class="line">nav .nav_main .logo .logoBg&#123;transition:all .1s;&#125;</div><div class="line">nav .nav_main .logo .logoText&#123;width:170px;height:100%;position:absolute;top:0;left:0;overflow:hidden;margin-left:10px;&#125;</div><div class="line">nav .nav_main .logo .logoText div&#123;overflow:hidden;position:relative;&#125;</div><div class="line">nav .nav_main .logo .logoText div:nth-of-type(1)&#123;height:45px;&#125;</div><div class="line">nav .nav_main .logo .logoText div img&#123;position:absolute;&#125;</div><div class="line">nav .nav_main .logo .logoText .logoAll&#123;width:169px;height:69px;top:-69px;background:url(http://www.miaov.com/static/normal/images/miaov-all.png);&#125;</div><div class="line">nav .nav_main .logo .logoText div:nth-of-type(2)&#123;height:24px;&#125;</div><div class="line">nav .nav_main .logo .logoText span&#123;position:absolute;left:-100px;top:42px;width:100px;height:5px;background:#e15671;&#125;</div><div class="line">.menu&#123;float:right;white-space:nowrap;position:relative;&#125;</div><div class="line">.menu .box&#123;width:0;height:100%;position:absolute;background:#e15671;left:0;overflow:visible;&#125;</div><div class="line">.menu .left&#123;width:0;height:100%;background:#fff;border-radius:50%;position:absolute;top:0;left:0;&#125;</div><div class="line">.menu .right&#123;width:0;height:100%;background:#f00;border-radius:50%;position:absolute;top:0;right:0;&#125;</div><div class="line">.menu ul&#123;padding-right:25px;position:relative;&#125;</div><div class="line">.menu ul li&#123;height:100%;display:inline-block;float:left;line-height:41px;color:#fff;font-size:14px;&#125;</div><div class="line">.menu ul li:first-child&#123;border-left:none;&#125;</div><div class="line">.menu ul li a&#123;color:#fff;display:block;padding:0 18px;&#125;</div><div class="line">.menu .loginBtn&#123;position:absolute;height:23px;top:43px;right:25px;&#125;</div><div class="line">.menu .loginBtn a&#123;display:inline-block;float:left;padding:0 13px;background-image:-moz-linear-gradient(top,#cf4c68,#e15671);background-image:-webkit-gradient(linear,left top,left bottom,color-stop(0,#cf4c68),color-stop(1,#e15671));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#cf4c68,endColorstr=#e15671,GradientType=&apos;0&apos;);color:#ffdbe2;font-size:12px;height:100%;line-height:23px;border-right:1px solid #fff;&#125;</div><div class="line">.menu .loginBtn a:last-child&#123;border:none;&#125;</div></pre></td></tr></table></figure></p>
<p>这样页面样式就出来了，然后就是关键的js控制样式的变化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line">$(function() &#123;</div><div class="line">	function e(e) &#123;</div><div class="line">		if (v = e.offsetLeft &gt; o.offsetLeft ? 1 : e.offsetLeft &lt; o.offsetLeft ? 2 : 0) &#123;</div><div class="line">			var n = .8 * Math.abs(e.offsetLeft - o.offsetLeft);</div><div class="line">			e.index != y &amp;&amp; (o.style.filter = &quot;blur(2px)&quot;, o.style.WebkitFilter = &quot;blur(2px)&quot;), move(o, &#123;</div><div class="line">				left: e.offsetLeft,</div><div class="line">				width: e.offsetWidth</div><div class="line">			&#125;, n, &quot;easeOut&quot;, function() &#123;</div><div class="line">				switch (v) &#123;</div><div class="line">					case 1:</div><div class="line">						t();</div><div class="line">						break;</div><div class="line">					case 2:</div><div class="line">						i();</div><div class="line">						break;</div><div class="line">					default:</div><div class="line">						move(l, &#123;</div><div class="line">							width: 0,</div><div class="line">							right: 0</div><div class="line">						&#125;, 30), move(f, &#123;</div><div class="line">							width: 0,</div><div class="line">							left: 0</div><div class="line">						&#125;, 30)</div><div class="line">				&#125;</div><div class="line">				o.style.filter = &quot;blur(0)&quot;, o.style.WebkitFilter = &quot;blur(0)&quot;</div><div class="line">			&#125;), e.offsetLeft &gt; o.offsetLeft ? (l.style.background = &quot;#e15671&quot;, f.style.background = &quot;url(http://www.miaov.com/static/normal/images/nav_bg.gif) repeat-x&quot;, move(l, &#123;</div><div class="line">				width: 40,</div><div class="line">				right: -20</div><div class="line">			&#125;, 150), move(f, &#123;</div><div class="line">				width: 40,</div><div class="line">				left: -20</div><div class="line">			&#125;, 150)) : e.offsetLeft &lt; o.offsetLeft &amp;&amp; (l.style.background = &quot;url(http://www.miaov.com/static/normal/images/nav_bg.gif) repeat-x&quot;, f.style.background = &quot;#e15671&quot;, move(l, &#123;</div><div class="line">				width: 40,</div><div class="line">				right: -20</div><div class="line">			&#125;, 150), move(f, &#123;</div><div class="line">				width: 40,</div><div class="line">				left: -20</div><div class="line">			&#125;, 150)), y = e.index</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function t() &#123;</div><div class="line">		move(l, &#123;</div><div class="line">			width: 0,</div><div class="line">			right: 0</div><div class="line">		&#125;, 80, &quot;linear&quot;, function() &#123;</div><div class="line">			l.style.background = &quot;url(http://www.miaov.com/static/normal/images/nav_bg.gif) repeat-x&quot;, move(l, &#123;</div><div class="line">				width: 20,</div><div class="line">				right: -10</div><div class="line">			&#125;, 80, &quot;linear&quot;, function() &#123;</div><div class="line">				move(l, &#123;</div><div class="line">					width: 0,</div><div class="line">					right: 0</div><div class="line">				&#125;, 50, &quot;linear&quot;)</div><div class="line">			&#125;)</div><div class="line">		&#125;), move(f, &#123;</div><div class="line">			width: 0,</div><div class="line">			left: 0</div><div class="line">		&#125;, 80, &quot;linear&quot;, function() &#123;</div><div class="line">			f.style.background = &quot;#e15671&quot;, move(f, &#123;</div><div class="line">				width: 20,</div><div class="line">				left: -10</div><div class="line">			&#125;, 80, &quot;linear&quot;, function() &#123;</div><div class="line">				move(f, &#123;</div><div class="line">					width: 0,</div><div class="line">					left: 0</div><div class="line">				&#125;, 50, &quot;linear&quot;)</div><div class="line">			&#125;)</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function i() &#123;</div><div class="line">		move(l, &#123;</div><div class="line">			width: 0,</div><div class="line">			right: 0</div><div class="line">		&#125;, 80, &quot;linear&quot;, function() &#123;</div><div class="line">			l.style.background = &quot;url(http://www.miaov.com/static/normal/images/nav_bg.gif) repeat-x&quot;, move(l, &#123;</div><div class="line">				width: 20,</div><div class="line">				right: -10</div><div class="line">			&#125;, 80, &quot;linear&quot;, function() &#123;</div><div class="line">				move(l, &#123;</div><div class="line">					width: 0,</div><div class="line">					right: 0</div><div class="line">				&#125;, 50, &quot;linear&quot;)</div><div class="line">			&#125;)</div><div class="line">		&#125;), move(f, &#123;</div><div class="line">			width: 0,</div><div class="line">			left: 0</div><div class="line">		&#125;, 80, &quot;linear&quot;, function() &#123;</div><div class="line">			f.style.background = &quot;#e15671&quot;, move(f, &#123;</div><div class="line">				width: 20,</div><div class="line">				left: -10</div><div class="line">			&#125;, 80, &quot;linear&quot;, function() &#123;</div><div class="line">				move(f, &#123;</div><div class="line">					width: 0,</div><div class="line">					left: 0</div><div class="line">				&#125;, 50, &quot;linear&quot;)</div><div class="line">			&#125;)</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	// 	定义全局变量</div><div class="line">	var initNum = 0;</div><div class="line"></div><div class="line">	var n = document.getElementsByTagName(&quot;nav&quot;)[0],</div><div class="line">		o = n.getElementsByClassName(&quot;box&quot;)[0],</div><div class="line">		l = n.getElementsByClassName(&quot;right&quot;)[0],</div><div class="line">		f = n.getElementsByClassName(&quot;left&quot;)[0],</div><div class="line">		a = n.getElementsByTagName(&quot;ul&quot;)[0],</div><div class="line">		s = a.getElementsByTagName(&quot;li&quot;),</div><div class="line">		m = n.getElementsByClassName(&quot;logo&quot;)[0],</div><div class="line">		r = (m.getElementsByClassName(&quot;text&quot;), m.getElementsByTagName(&quot;img&quot;)),</div><div class="line">		g = m.getElementsByTagName(&quot;span&quot;)[0],</div><div class="line">		u = m.getElementsByClassName(&quot;logoAll&quot;)[0],</div><div class="line">		c = s[initNum].offsetLeft,</div><div class="line">		h = s[0].offsetTop,</div><div class="line">		d = initNum,</div><div class="line">		y = 0,</div><div class="line">		v = 0,</div><div class="line">		b = !0,</div><div class="line">		p = 0;</div><div class="line">	o.style.left = c + &quot;px&quot;, o.style.top = h + &quot;px&quot;, o.style.width = s[initNum].offsetWidth + &quot;px&quot;;</div><div class="line">	for (var w = 0; w &lt; s.length; w++) s[w].index = w, s[w].onmouseenter = function() &#123;</div><div class="line">		clearTimeout(p), e(this)</div><div class="line">	&#125;;</div><div class="line">	a.onmouseleave = function() &#123;</div><div class="line">		p = setTimeout(function() &#123;</div><div class="line">			e(s[d])</div><div class="line">		&#125;, 100)</div><div class="line">	&#125;, m.onmouseenter = function() &#123;</div><div class="line">		b &amp;&amp; (b = !1, r[0].style.transform = &quot;scale(1.05)&quot;, r[1].style.top = &quot;47px&quot;, r[2].style.top = &quot;-25px&quot;, u.style.opacity = 0, g.style.left = &quot;-100px&quot;, move(g, &#123;</div><div class="line">			left: 270</div><div class="line">		&#125;, 300, &quot;linear&quot;, function() &#123;</div><div class="line">			move(r[1], &#123;</div><div class="line">				top: 0</div><div class="line">			&#125;, 300), move(r[2], &#123;</div><div class="line">				top: 0</div><div class="line">			&#125;, 300, &quot;linear&quot;, function() &#123;</div><div class="line">				move(u, &#123;</div><div class="line">					opacity: 1</div><div class="line">				&#125;, 300, &quot;linear&quot;, function() &#123;</div><div class="line">					b = !0</div><div class="line">				&#125;)</div><div class="line">			&#125;)</div><div class="line">		&#125;))</div><div class="line">	&#125;, m.onmouseleave = function() &#123;</div><div class="line">		r[0].style.transform = &quot;scale(1)&quot;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>文件引用了一个move方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">function move(t, n, e, r, a) &#123;</div><div class="line">	clearInterval(t.iTimer);</div><div class="line">	var u = e || 1e3,</div><div class="line">		i = &#123;&#125;;</div><div class="line">	for (var o in n) i[o] = &#123;&#125;, &quot;opacity&quot; == o ? (i[o].b = Math.round(100 * css(t, o)), i[o].c = 100 * n[o] - i[o].b) : (i[o].b = parseInt(css(t, o)), i[o].c = n[o] - i[o].b);</div><div class="line">	var r = r || &quot;linear&quot;,</div><div class="line">		c = (new Date).getTime();</div><div class="line">	t.iTimer = setInterval(function() &#123;</div><div class="line">		var e = (new Date).getTime() - c;</div><div class="line">		e &gt;= u &amp;&amp; (e = u);</div><div class="line">		for (var o in n) &#123;</div><div class="line">			var f = Tween[r](e, i[o].b, i[o].c, u);</div><div class="line">			&quot;opacity&quot; == o ? (t.style[o] = f / 100, t.style.filter = &quot;alpha(opacity=&quot; + f + &quot;)&quot;) : t.style[o] = f + &quot;px&quot;</div><div class="line">		&#125;</div><div class="line">		e == u &amp;&amp; (clearInterval(t.iTimer), a &amp;&amp; a.call(t))</div><div class="line">	&#125;, 16)</div><div class="line">&#125;</div><div class="line"></div><div class="line">function css(t, n) &#123;</div><div class="line">	return t.currentStyle ? t.currentStyle[n] : getComputedStyle(t, !1)[n]</div><div class="line">&#125;</div><div class="line">var Tween = &#123;</div><div class="line">	linear: function(t, n, e, r) &#123;</div><div class="line">		return e * t / r + n</div><div class="line">	&#125;,</div><div class="line">	easeIn: function(t, n, e, r) &#123;</div><div class="line">		return e * (t /= r) * t + n</div><div class="line">	&#125;,</div><div class="line">	easeOut: function(t, n, e, r) &#123;</div><div class="line">		return -e * (t /= r) * (t - 2) + n</div><div class="line">	&#125;,</div><div class="line">	easeBoth: function(t, n, e, r) &#123;</div><div class="line">		return (t /= r / 2) &lt; 1 ? e / 2 * t * t + n : -e / 2 * (--t * (t - 2) - 1) + n</div><div class="line">	&#125;,</div><div class="line">	easeInStrong: function(t, n, e, r) &#123;</div><div class="line">		return e * (t /= r) * t * t * t + n</div><div class="line">	&#125;,</div><div class="line">	easeOutStrong: function(t, n, e, r) &#123;</div><div class="line">		return -e * ((t = t / r - 1) * t * t * t - 1) + n</div><div class="line">	&#125;,</div><div class="line">	easeBothStrong: function(t, n, e, r) &#123;</div><div class="line">		return (t /= r / 2) &lt; 1 ? e / 2 * t * t * t * t + n : -e / 2 * ((t -= 2) * t * t * t - 2) + n</div><div class="line">	&#125;,</div><div class="line">	elasticIn: function(t, n, e, r, a, u) &#123;</div><div class="line">		if (0 === t) return n;</div><div class="line">		if (1 == (t /= r)) return n + e;</div><div class="line">		if (u || (u = .3 * r), !a || a &lt; Math.abs(e)) &#123;</div><div class="line">			a = e;</div><div class="line">			var i = u / 4</div><div class="line">		&#125; else var i = u / (2 * Math.PI) * Math.asin(e / a);</div><div class="line">		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * (t * r - i) * Math.PI / u)) + n</div><div class="line">	&#125;,</div><div class="line">	elasticOut: function(t, n, e, r, a, u) &#123;</div><div class="line">		if (0 === t) return n;</div><div class="line">		if (1 == (t /= r)) return n + e;</div><div class="line">		if (u || (u = .3 * r), !a || a &lt; Math.abs(e)) &#123;</div><div class="line">			a = e;</div><div class="line">			var i = u / 4</div><div class="line">		&#125; else var i = u / (2 * Math.PI) * Math.asin(e / a);</div><div class="line">		return a * Math.pow(2, -10 * t) * Math.sin(2 * (t * r - i) * Math.PI / u) + e + n</div><div class="line">	&#125;,</div><div class="line">	elasticBoth: function(t, n, e, r, a, u) &#123;</div><div class="line">		if (0 === t) return n;</div><div class="line">		if (2 == (t /= r / 2)) return n + e;</div><div class="line">		if (u || (u = .3 * r * 1.5), !a || a &lt; Math.abs(e)) &#123;</div><div class="line">			a = e;</div><div class="line">			var i = u / 4</div><div class="line">		&#125; else var i = u / (2 * Math.PI) * Math.asin(e / a);</div><div class="line">		return 1 &gt; t ? -.5 * a * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * (t * r - i) * Math.PI / u) + n : a * Math.pow(2, -10 * (t -= 1)) * Math.sin(2 * (t * r - i) * Math.PI / u) * .5 + e + n</div><div class="line">	&#125;,</div><div class="line">	backIn: function(t, n, e, r, a) &#123;</div><div class="line">		return &quot;undefined&quot; == typeof a &amp;&amp; (a = 1.70158), e * (t /= r) * t * ((a + 1) * t - a) + n</div><div class="line">	&#125;,</div><div class="line">	backOut: function(t, n, e, r, a) &#123;</div><div class="line">		return &quot;undefined&quot; == typeof a &amp;&amp; (a = 2.0158), e * ((t = t / r - 1) * t * ((a + 1) * t + a) + 1) + n</div><div class="line">	&#125;,</div><div class="line">	backBoth: function(t, n, e, r, a) &#123;</div><div class="line">		return &quot;undefined&quot; == typeof a &amp;&amp; (a = 1.70158), (t /= r / 2) &lt; 1 ? e / 2 * t * t * (((a *= 1.525) + 1) * t - a) + n : e / 2 * ((t -= 2) * t * (((a *= 1.525) + 1) * t + a) + 2) + n</div><div class="line">	&#125;,</div><div class="line">	bounceIn: function(t, n, e, r) &#123;</div><div class="line">		return e - Tween.bounceOut(r - t, 0, e, r) + n</div><div class="line">	&#125;,</div><div class="line">	bounceOut: function(t, n, e, r) &#123;</div><div class="line">		return (t /= r) &lt; 1 / 2.75 ? 7.5625 * e * t * t + n : 2 / 2.75 &gt; t ? e * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + n : 2.5 / 2.75 &gt; t ? e * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + n : e * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + n</div><div class="line">	&#125;,</div><div class="line">	bounceBoth: function(t, n, e, r) &#123;</div><div class="line">		return r / 2 &gt; t ? .5 * Tween.bounceIn(2 * t, 0, e, r) + n : .5 * Tween.bounceOut(2 * t - r, 0, e, r) + .5 * e + n</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>到这里，nav的动态效果就完成了，首页还有字体的动效，基本实现思路是给每个字包裹一个span，给其添加绝对定位，通过top的改变实现平滑的移动。</p>
<p>这个下次再分享。</p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到改版后妙味课堂的网站，有些动画特效很不错，就想着借鉴学习下。&lt;/p&gt;
&lt;p&gt;首先是头部导航栏的特效，鼠标hover之后有logo的变化以及栏目的变化&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>合理管理你的时间--大牛分享的经验</title>
    <link href="http://yoursite.com/2016/08/24/experience/"/>
    <id>http://yoursite.com/2016/08/24/experience/</id>
    <published>2016-08-24T05:30:00.000Z</published>
    <updated>2016-08-24T05:19:53.475Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个软(ku)件(bi)工(de)程(ma)师(nong)，你有没有觉得做什么事都没时间？没时间学习新东西，没时间去回顾、整理原来写的烂代码，没时间写单元测试，没时间给接管你项目的家伙写文档，没时间思考，没时间喘气，没！时！间！<br><img src="http://mmbiz.qpic.cn/mmbiz_png/0tIK8YmulicPdTctoBQhWIz8mmgiblhCiaqSK1o2CeMvZKCAQnFWgX70ndN2X5rg5SdicdiaqRU0gibzDgDVUgIiaET7g/0?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="qianduan"><br><a id="more"></a><br>　额……如果你肯花点时间看看这篇文章，我相信你会明白应该把时间花在哪。<br>　　我曾以为成为一个技术大牛的唯一途径是玩命地学习与工作。这个想法差点毁了我。身体越来越差，和家人与朋友越来越疏远，很快我就撑不住了。后来我开始反思，发现自己的时间安排极为不合理，并逐渐悟出了下面这5个道理，这才让自己从那种高压状态中解脱出来。<br>　不要因为怕自己落伍而去学习新东西<br>　　一个优秀的开发者始终在学习，这一点毋庸置疑。诚然，旧的技术终会被淘汰。但是新的技术终有一天会变成旧的。因此，没有必要一味地去追求最新的技术。<br>　　平均每37秒就会诞生一个新的标准或框架，你不可能把它们都学会。很多新技术、框架或者新特性对你来说都不是必需的，你没必要非得了解它们。真正有价值的技术需要经过社区和市场一段时间的打磨才能出现。IT公司通常都会重点培养适合于自己的技术，没有哪个公司会一拍脑门让自己的代码去适配某个全新的框架。因此你也不用太担心因为某些新技术而被裁员。你需要关注的是这三类知识，按照优先级排列如下：<br>　　（1）基础。基础是重中之重。当你掌握一门基础知识后，你可以快速掌握其相关的技术。比如如果你非常熟悉JavaScript，那么基于JavaScript的任何框架都难不倒你。如果你掌握了面向对象编程，那么你可以快速掌握一门新的面向对象的语言。深入学习基础能够大幅提高你的学习效率。<br><img src="http://mmbiz.qpic.cn/mmbiz_png/0tIK8YmulicPdTctoBQhWIz8mmgiblhCiaqDR3YFKEicc84l2C6jl3WQiaYfFfCcK9dCHaZaib2lBOcaWFZpI3icFf7Pg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="qianduan"><br>    （2）你常用技术的最新版本。你平常用得最多的技术才是你的铁饭碗。如果它们出了新的版本，那么你有必要花时间去学习一下。<br>　　（3）大公司推崇的技术。如果一个非常知名的公司（如谷歌、脸书和微软）发布了一个新的技术并不断地对它进行维护，那么这个技术就值得你去关注。曾经社区里有成百上千个非常火的JavaScript框架，结果Angular和React的出现瞬间抢走了他们的风头。<br><img src="http://mmbiz.qpic.cn/mmbiz_jpg/0tIK8YmulicPdTctoBQhWIz8mmgiblhCiaqWhTE9o79GR1wQicR3BM8uzm4Gv8uduicBLCVbyNTTNaE1MgBibqDJJvVQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="qianduan"><br>好好规划你的学习时间，每天安排一段时间来学习。这段时间不一定很长，哪怕只有25分钟也能使你有所成长。<br>　写出高效的代码比一般的代码要花更多的时间<br>　　当你运行完程序并发现功能实现的时候，你感觉工作已经完成了，实则不然。实现一个新的功能除了编写新的代码以外，还包括对该功能相关的其他部分已有代码的调整与优化。当你发现你的一部分时间花在完善代码的设计上了，那么从长远角度来看你遇到的错误会更少一些。<br>　　要想减少你的代码的错误并优化设计，你需要注意以下两点：<br>　　（1）先准备好测试环境，然后再开发。先将测试功能配置好，然后再编写符合测试标准的代码。这样既可以减少bug的产生还能优化你的代码思路，因为你在编写代码的时候就严格遵守更加合理和规范的标准。这会使你的代码变得简洁、高效。<br>    （2）迭代完成你的工作而不是一步到位。在你的代码实现需求之前不要花时间去完善它。你永远也不可能使你的代码处于完美的状态。你优先要做的就是让你的代码完成指定的功能。通常情况开发者会犯这两个错误：要么花了太多时间思考而没有充足的时间去实现，要么没有在设计最初的方案上花足够的时间。遵循Kent<br>Beck说得这句话:<br>“先让它生效，再让它正确地工作，最后再让它更高效”。<br>　7*24小时的工作不会让你成为佼佼者，合理的时间安排才是最重要的<br>　　这个经验源于我自身的教训。我曾经为了让老板和客户满意而疯狂地工作。我害怕说“不”，不想让其他人失望。我尽我所能去完成工作，曾经大量摄入咖啡因通宵地工作，困了就直接睡在我的办公桌上。<br><img src="http://mmbiz.qpic.cn/mmbiz_jpg/0tIK8YmulicPdTctoBQhWIz8mmgiblhCiaq6c35icIFZe8Zlm8rMWhvEpYYQM0z1WZmfxlVdOxk5s8wKSMiayYcqNYA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="qianduan"><br>起初我是全公司的楷模。我得到老板的赏识并感觉风光无限，前途一片光明。这种并不长久的过度表现使其他人对我产生了过高的期待，很快我就撑不住了。结果我的身子垮了，经常生病，耽误了工作。公司的人变得不再信任我。<br>　　后来我渐渐明白真正的佼佼者是那些一直可靠的人。他们保证的事一定会做到。要想成为那样的人就必须认真规划自己的时间。<br>　　你必须牢牢把握自己时间的控制权，在约定好的期限即将到达的时候高质量地完成你的工作。要想做到这一点起初会很难，因为你需要对超出你能力范围的任务说不。<br>刚开始，你的老板和客户可能不太会在意你。但是一旦你建立起靠谱、可信的名声后，一切就都不一样了。随着时间的推移，其他开发者都会渐渐显露疲态，变得不再那么可靠，而你则会脱颖而出，成为团队里的佼佼者。我就是这样成为了行业翘楚。我很好地协调了自己的时间并调整他人对自己的期望值，因此建立起了高质量和高实效的好名声。<br>　不是所有的付出都会有回报<br>　　花时间也是一种投资。和其他的投资一样，你非常期待投资会有回报，希望在回本的基础上有所收益。<br>　　我之前曾提到“先让它生效，再让它正确地工作，最后再让它更高效”这句话。但是不要误解，这里的“正确”不代表完美，“高效”不代表追求极致。“正确”意味着你的代码能够准确地实现功能并易于维护。“高效”意味着不影响用户体验。最关键的一点是你的应用要让用户感觉很快。<br>因此，不要纠结于优化一个基本上不用的函数，也不要为了仅节省几毫秒而去修改一个已经比眨眼（大约300毫秒）还要快的功能。不要因为你学了一个新的技术或方法就把你之前写的功能正确、结构完整的代码推翻重写。<br>　按照时间表去工作可以使你更加高效<br>　　起初我很难理解这一点。你不将你的精力全部投入到工作中也能做到高效？恩，这是真的。Allison<br>Gabriel是弗吉尼亚联邦大学的管理学教授助理，主要研究工作需求和员工动机。她认为：“很多研究表明人的认知能力是有限的，当你不断地去耗费你的能力时，你并不能达到最佳的工作状态。当你被自己榨干时，你的效率会大幅下降。”<br>　　永远不要在压力非常大的时候工作，尤其是你非常疲劳、情绪不好的时候。这些不安因素都会让你分心，从身心两方面对你造成不良影响，降低你的工作效率。<br>人脑的自控能力好比是一种资源，当你进行自我控制时，这个资源会被消耗一部分。如果你的自控能力被大量消耗的话你就不能集中注意力，自然就不能高效地工作了。<br>　　不论你是否乐意，你的身心都需要一个休息的时间。因此在每天的时间表里都要安排休息的时间。严格按照时间表的休息时间去休息，不多也不少，这样可以让你在充分休息的同时不感到内疚。指定明确的休息时间可以让你以更加自如的心态去工作，因为你知道你有休息的时间而不是无休止的工作下去。<br><img src="http://mmbiz.qpic.cn/mmbiz_jpg/0tIK8YmulicPdTctoBQhWIz8mmgiblhCiaqJXbJeXxENyw8o9GKXqEfXujeMMokOgCeuk0OJ1FgCh1c2sicT8jnGQQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="qianduan"><br>结语<br>　　了解了这五个经验，相信你已经明白了应该如何安排自己的时间。合理地安排你的学习、工作与休息的时间，制定出详细的时间表并严格按照它执行。学习你应该学的、花时间在一些必要工作上、该休息的时候好好休息。希望你也能在自己的领域崭露头角，成为一个真正的大牛~</p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个软(ku)件(bi)工(de)程(ma)师(nong)，你有没有觉得做什么事都没时间？没时间学习新东西，没时间去回顾、整理原来写的烂代码，没时间写单元测试，没时间给接管你项目的家伙写文档，没时间思考，没时间喘气，没！时！间！&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz_png/0tIK8YmulicPdTctoBQhWIz8mmgiblhCiaqSK1o2CeMvZKCAQnFWgX70ndN2X5rg5SdicdiaqRU0gibzDgDVUgIiaET7g/0?wx_fmt=gif&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;qianduan&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="experience" scheme="http://yoursite.com/tags/experience/"/>
    
      <category term="time" scheme="http://yoursite.com/tags/time/"/>
    
  </entry>
  
  <entry>
    <title>JSP初识（一）</title>
    <link href="http://yoursite.com/2016/08/24/jsp-one/"/>
    <id>http://yoursite.com/2016/08/24/jsp-one/</id>
    <published>2016-08-24T01:30:00.000Z</published>
    <updated>2016-08-24T03:29:29.925Z</updated>
    
    <content type="html"><![CDATA[<p>已学完javaEE，对java的面向对象有了一些了解，但工作多以前端为主，故懈怠了一段时间，内心愧疚。所以趁着下班后的时间去充充电，从jsp开始学起吧。</p>
<p>现在主流的两种应用模式开始学起：</p>
<p>1.C/S 桌面应用程序：基于客户机/服务端，客户机桌面上诸如QQ，YY，谷歌浏览器等程序运行在客户机上的都是基于C/S的。<br>2.B/S web应用程序：基于浏览器/服务端，顾名思义是运行在浏览器的web应用。</p>
<a id="more"></a>
<p>这里我们主要是学习如何构建web应用程序。</p>
<p>一个完整的网页是如何呈现在电脑上的：一个人在浏览器地址栏输入一个请求地址，这个请求地址通过客户机发送给服务器，服务器解析指定的地址，对应的jsp/servlet，然后返回给浏览器，通过客户机展示出来</p>
<p>这个请求地址就是一个URL，遵循http协议，那么http协议是什么呢？</p>
<p>简单的来说，http协议就是支持简单的请求和响应会话</p>
<p>如果客户发送一个http请求，服务器会打开一个http响应做出应答。<br>每个客户机发送的http协议都不一样。<br>Http协议包含哪些元素：<br>查看工具：HttpWatch或者Google浏览器的Debug工具或者火狐的debug<br>在浏览器地址栏输入url都是get请求方式<br>get：<br>1.URL和参数之间用？分隔，参数形式是：参数名=参数值，如果是多个参数；第一个还是“？“；后面多个参数用“&amp;”进行分隔。<a href="http://www.zsjp.cn/product/list-45-0-0-1.html?brand=0&amp;color=0&amp;material=0&amp;fabrics=0&amp;keyword=" target="_blank" rel="external">http://www.zsjp.cn/product/list-45-0-0-1.html?brand=0&amp;color=0&amp;material=0&amp;fabrics=0&amp;keyword=</a><br>2.每一个浏览器URL的长度是不一样的，且是有限制的，范围在：【240-255】个字符。</p>
<p>post：<br>一般应用于form表单提交中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;from method=&quot;post&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>提交的长度达到kb，几乎无限制。</p>
<p>两者区别：get请求会暴露参数列表，post不会；get有不安全性，在数据的添加或者登录注册业务的时候用post提交。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已学完javaEE，对java的面向对象有了一些了解，但工作多以前端为主，故懈怠了一段时间，内心愧疚。所以趁着下班后的时间去充充电，从jsp开始学起吧。&lt;/p&gt;
&lt;p&gt;现在主流的两种应用模式开始学起：&lt;/p&gt;
&lt;p&gt;1.C/S 桌面应用程序：基于客户机/服务端，客户机桌面上诸如QQ，YY，谷歌浏览器等程序运行在客户机上的都是基于C/S的。&lt;br&gt;2.B/S web应用程序：基于浏览器/服务端，顾名思义是运行在浏览器的web应用。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="url" scheme="http://yoursite.com/tags/url/"/>
    
      <category term="jsp" scheme="http://yoursite.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>用简单的css实现下拉列表select框的默认样式</title>
    <link href="http://yoursite.com/2016/08/23/about-select/"/>
    <id>http://yoursite.com/2016/08/23/about-select/</id>
    <published>2016-08-23T01:02:00.000Z</published>
    <updated>2016-08-23T00:29:59.268Z</updated>
    
    <content type="html"><![CDATA[<p>Mobile 和现代浏览器的解决方案</p>
<p>下面是解决方案。</p>
<p>我们看到默认的下载选择框在firefox和chrome中是有些不同的</p>
<p>Chrome 和 Firefox 中分别是这样的：<br><a id="more"></a></p>
<p><img src="http://ourjs.github.io/static/2015/firefox_default.png" alt="截图"></p>
<p>其实用下列CSS就可以解决，原理是将浏览器默认的下拉框样式清除，然后应用上自己的，再附一张向右对齐小箭头的图片即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">select &#123;</div><div class="line">  /*Chrome和Firefox里面的边框是不一样的，所以复写了一下*/</div><div class="line">  border: solid 1px #000;</div><div class="line"></div><div class="line">  /*很关键：将默认的select选择框样式清除*/</div><div class="line">  appearance:none;</div><div class="line">  -moz-appearance:none;</div><div class="line">  -webkit-appearance:none;</div><div class="line"></div><div class="line">  /*在选择框的最右侧中间显示小箭头图片*/</div><div class="line">  background: url(&quot;http://ourjs.github.io/static/2015/arrow.png&quot;) no-repeat scroll right center transparent;</div><div class="line"></div><div class="line"></div><div class="line">  /*为下拉小箭头留出一点位置，避免被文字覆盖*/</div><div class="line">  padding-right: 14px;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/*清除ie的默认选择框样式清除，隐藏下拉箭头*/</div><div class="line">select::-ms-expand &#123; display: none; &#125;</div></pre></td></tr></table></figure>
<p>注*　这篇文章参考了 change-default-select-dropdown-style-just-css，但文中所述固定了select框的长度和高度，对此进行了修改。</p>
<p>更新： 针对旧版IE的解决方案<br>评论中提到 IE8/9并不支持  appearance:none  CSS属性，想要支持的话可能需要非常特殊的方法，参考SF： 我们需要为其添加一个父容器，容器是用来覆盖小箭头的，然后为select添加一个向右的小偏移或者宽度大于父级元素。设置父级的CSS属性为超出部分不可见，即可覆盖即小箭头。然后再为父级容器添加背景图片即可。overflow: hidden并不能隐藏下拉框的显示。<br>HTML<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;parent&quot;&gt;</div><div class="line">  &lt;select&gt;</div><div class="line">      &lt;option&gt;what&lt;/option&gt;</div><div class="line">      &lt;option&gt;the&lt;/option&gt;</div><div class="line">      &lt;option&gt;hell&lt;/option&gt;</div><div class="line">  &lt;/select&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>CSS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> #parent &#123;</div><div class="line">    background: url(&apos;yourimage&apos;) no-repeat;</div><div class="line">    width: 100px;</div><div class="line">    height: 30px;</div><div class="line">    overflow: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#parent select &#123;</div><div class="line">    background: transparent;</div><div class="line">    border: none;</div><div class="line">    padding-left: 10px;</div><div class="line">    width: 120px;</div><div class="line">    height: 100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>美中不足的是这种方案下拉选项的宽度会比他的父容器宽一点。</p>
<p>最后如果样式比较复杂可以考虑用div去代替，这里不做叙述。</p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mobile 和现代浏览器的解决方案&lt;/p&gt;
&lt;p&gt;下面是解决方案。&lt;/p&gt;
&lt;p&gt;我们看到默认的下载选择框在firefox和chrome中是有些不同的&lt;/p&gt;
&lt;p&gt;Chrome 和 Firefox 中分别是这样的：&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>React 开发一款简单的赛车游戏</title>
    <link href="http://yoursite.com/2016/08/20/about-react/"/>
    <id>http://yoursite.com/2016/08/20/about-react/</id>
    <published>2016-08-20T09:02:00.000Z</published>
    <updated>2016-08-20T09:11:30.154Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究egret引擎时，在论坛看到了用egret引擎写的一款赛车游戏</p>
<p><img src="http://77flwk.com1.z0.glb.clouddn.com/cargame.png" alt="游戏截图"></p>
<a id="more"></a>
<p>玩法很简单，左右控制赛车躲避来车，碰撞即游戏失败</p>
<p>下面将为大家一步步讲解，如何用React写出一款纯 javascript+css 的小游戏</p>
<p>准备工作<br>本教程使用 React 0.14 版本</p>
<p>一、React基本结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;reactGame&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">     // ** code **</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到 html 代码非常简单，我们只留了一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;reactGame&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>作为React渲染后插入的节点，所有的代码均写在JS中。<br>大家注意到 script 标签的 type 为 text/babel ，由 于React 使用 JSX 语法，browser.min.js 用于将 JSX 语法转化为 javascript 语法。<br>二、创建第一个React组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">var GameBoard = React.createClass(&#123;</div><div class="line">    getInitialState : function()&#123;</div><div class="line">        return &#123;</div><div class="line">            gameState : 0</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    render : function()&#123;</div><div class="line">        return &lt;div className=&quot;board&quot;&gt;</div><div class="line">            &lt;div className=&quot;roadbed&quot;&gt;&lt;/div&gt;</div><div class="line">            &lt;div className=&quot;road&quot;&#125;&gt;</div><div class="line">                &lt;div className=&quot;hero&quot;&gt;&lt;/div&gt;</div><div class="line">                &lt;div className=&quot;enemy&quot;&gt;&lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;span className=&quot;start&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;span className=&quot;kilo&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;div className=&quot;failbub&quot;&gt;</div><div class="line">                &lt;span className=&quot;failtext&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span className=&quot;retry&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(&lt;GameBoard/&gt;,document.getElementById(&quot;reactGame&quot;));</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>我们通过样式创建了一个基础的游戏界面：游戏容器 [board]，路面 [roadbed]，路面范围 [road]，主角车 [hero]，敌车 [enemy]，还有公里板 [kilo]，失败提示 [failbub]</p>
<p>我们创建了一个 GameBoard 的组件，用于建立整个游戏场景，你也可以建立多个子组件，比如主角赛车，敌方赛车，公里板，再在 Gameboard 中引入子组件。</p>
<p>本教程案例相对简单，我们只创建一个组件，也能更容易理解代码逻辑。</p>
<p>React 自带了一些事件处理函数，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getInitialState()    //组件初始化数据</div><div class="line">componentWillMount() //组件渲染前调用</div><div class="line">componentDidMount()  //组件渲染后调用</div><div class="line">render()             //组件渲染</div></pre></td></tr></table></figure></p>
<p>而 render 函数中，将返回我们页面所有的 html 结构</p>
<p>下面我们用一个简单的例子帮助大家理解 React 的工作流程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> &lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">var GameBoard = React.createClass(&#123;</div><div class="line">    getInitialState : function()&#123;</div><div class="line">        return &#123;</div><div class="line">            gameState : 0</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    gameStart : function()&#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            gameState : 1</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    render : function()&#123;</div><div class="line">        return  &lt;span className = &#123;this.state.gameState==0?&quot;start&quot;:&quot;start hide&quot;&#125; onClick = &#123;this.gameStart&#125;&gt;&lt;/span&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(&lt;GameBoard/&gt;,document.getElementById(&quot;reactGame&quot;));</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>在上面的例子中，我们在 getInitialState 函数中初始化了 state.gameState:0，在 render 函数中，我们对 div 的 className 做了一个三元表达式的判断，如果 gameState 为0，表示游戏未开始，渲染出的 html 结构为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;start&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>我们声明一个自定义的方法 gameStart ，在开始按钮上绑定 onClick 事件，调用 gameState，执行了 setState 方法，将 state 对象中的 gameState 设置为1，由于调用了 setState ，render 函数立即更新，此时 gameState 值为1，渲染出的 html 结构为（开始按钮隐藏）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;start hide&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>简单来说，React 有个全局的状态 state，我们通过 setState 去改变 state 对象的值，一旦执行了 setState，React 立即触发 render 函数，通过内部的 diff 算法，判断当前 DOM 是否发生改变，<br>改变即更新到真实 DOM 中。</p>
<p>三、游戏开始！<br>现在我们开始让游戏跑起来，为了避免频繁的操作 DOM 结点影响性能，所有动态效果均由 css3 实现。</p>
<p>第一步：马路移动</p>
<p>首先我们对游戏的动画效果进行分析，小车固定在屏幕底部，所以我们制作一个马路向下运动的循环动画，看起来就像小车在向上跑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.roadbed&#123;</div><div class="line">    background:url(../resource/road.png) repeat-y;</div><div class="line">    width:480px;</div><div class="line">    height:1600px;</div><div class="line">    position:absolute;</div><div class="line">    left:0;</div><div class="line">    top:-800px;</div><div class="line">&#125;</div><div class="line">.roadRun&#123;</div><div class="line">    -webkit-transform:translateZ(0);</div><div class="line">    -webkit-animation:roadRun 1.2s linear infinite;</div><div class="line">&#125;</div><div class="line">@-webkit-keyframes roadRun&#123;</div><div class="line">    100%&#123; -webkit-transform:translateY(800px);&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们也可以使用 background-position 动画，但使用 transform 动画更加流畅。</p>
<p>第二步：控制小车移动</p>
<p>我们通过控制键盘的左右方向键来控制赛车的左右位置，当按下左方向键，我们给 hero 节点加上 left ，按下右方向键，加上 right ，在 css 中控制 hero.left 和 hero.right 的位置</p>
<p>在 render 渲染后，我们调用 componentDidMount 方法为游戏注册一个键盘事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">var GameBoard = React.createClass(&#123;</div><div class="line">    getInitialState : function()&#123;</div><div class="line">        return &#123;</div><div class="line">            gameState : 0,</div><div class="line">            heroLoc : 0,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    gameStart : function()&#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            gameState : 1</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    gameHandle : function(e)&#123;</div><div class="line">        if(this.state.gameState ==1)&#123;</div><div class="line">            switch(e.keyCode)&#123;</div><div class="line">                case 37:</div><div class="line">                    this.setState(&#123;heroLoc : 0&#125;);</div><div class="line">                    break;</div><div class="line">                case 39:</div><div class="line">                    this.setState(&#123;heroLoc : 1&#125;);</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    componentDidMount:function()&#123;</div><div class="line">        window.addEventListener(&quot;keydown&quot;, this.gameHandle, false);</div><div class="line">    &#125;,</div><div class="line">    render : function()&#123;</div><div class="line">        var state = this.state;</div><div class="line">        return &lt;div className=&quot;board&quot;&gt;</div><div class="line">            &lt;div className=&quot;roadbed&quot;&gt;&lt;/div&gt;</div><div class="line">            &lt;div className=&quot;road&quot;&#125;&gt;</div><div class="line">                &lt;div className=&#123;state.heroLoc==0?&quot;hero left&quot;:&quot;hero right&quot;&#125;&gt;&lt;/div&gt;</div><div class="line">                &lt;div className=&quot;enemy&quot;&gt;&lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;span className=&quot;start&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;span className=&quot;kilo&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;div className=&quot;failbub&quot;&gt;</div><div class="line">                &lt;span className=&quot;failtext&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span className=&quot;retry&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;span className = &#123;state.gameState==0?&quot;start&quot;:&quot;start hide&quot;&#125; onClick = &#123;this.gameStart&#125;&gt;&lt;/span&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(&lt;GameBoard/&gt;,document.getElementById(&quot;reactGame&quot;));</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>为 componentDidMount 注册监听了键盘事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentDidMount:function()&#123;</div><div class="line">       window.addEventListener(&quot;keydown&quot;, this.gameHandle, false);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当按下键盘按键后，调用 gameHandle 方法，判断按键 keyCode ，如果按下了左方向键（keyCode:37），则设置 heroLoc:0,<br>按下右方向键（keyCode:39），设置 heroLoc:1，render 方法再次更新，判断 heroLoc 值，如果 heroLoc == 0，则主角结构为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;hero left&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>heroLoc == 1 则结构为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;hero right&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>至此，我们完成了小车的基本移动操作</p>
<p>第三步：创建敌人赛车</p>
<p>敌方车辆与主角运动方向一致，都是向上运动，由于主角相对固定，速度又比敌方车辆块，所以 enemy 的运动方向实际是向下运动，直至消失在屏幕之外<br>为了降低复杂度，我们规定屏幕上每次只会出现一辆敌方车辆，方向随机，所以我们只需一个div作为敌方小车，在小车运动离开屏幕后，马上随机给小车换上不同的车型和方向的 class。<br>我们给 enemy 加上从0到1000px的运动动画,运动持续时间1s<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.enemy&#123; -webkit-animation:enemy 1s linear; &#125;</div><div class="line">@-webkit-keyframes enemy&#123;</div><div class="line">    100%&#123; -webkit-transform:translateY(1000px);&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>javascript部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">var GameBoard = React.createClass(&#123;</div><div class="line">    getInitialState : function()&#123;</div><div class="line">        return &#123;</div><div class="line">            gameState : 0,</div><div class="line">            heroLoc : 0,</div><div class="line">            enemyLoc: 0,</div><div class="line">            enemyType : 0,</div><div class="line">            aniEnd : true,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    gameStart : function()&#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            gameState : 1</div><div class="line">        &#125;);</div><div class="line">        createEnemy();</div><div class="line">    &#125;,</div><div class="line">    gameHandle : function(e)&#123;</div><div class="line">        if(this.state.gameState ==1)&#123;</div><div class="line">            switch(e.keyCode)&#123;</div><div class="line">                case 37:</div><div class="line">                    this.setState(&#123;heroLoc : 0&#125;);</div><div class="line">                    break;</div><div class="line">                case 39:</div><div class="line">                    this.setState(&#123;heroLoc : 1&#125;);</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    createEnemy : function()&#123;</div><div class="line">        var that = this,</div><div class="line">        var enemyClass,enemyLoc,enemyType,</div><div class="line">              animationEnd = true;</div><div class="line">        setInterval(function()&#123;</div><div class="line">            if(that.state.aniEnd &amp;&amp; that.state.gameState == 1)&#123;</div><div class="line">                that.setState(&#123;aniEnd : false&#125;);</div><div class="line">                enemyType = Math.floor(Math.random()*3);</div><div class="line">                enemyLoc = Math.round(Math.random());</div><div class="line">                that.setState(&#123;enemyLoc : enemyLoc&#125;);</div><div class="line">                that.setState(&#123;enemyType : enemyType&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;,1000);</div><div class="line">        that.refs.enemy.addEventListener(&quot;webkitAnimationEnd&quot;,function()&#123;</div><div class="line">            that.setState(&#123;aniEnd : true&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    componentDidMount:function()&#123;</div><div class="line">        window.addEventListener(&quot;keydown&quot;, this.gameHandle, false);</div><div class="line">    &#125;,</div><div class="line">    render : function()&#123;</div><div class="line">        var state = this.state;</div><div class="line">        var enemyCls = state.gameStart == 0 ?&quot;enemy&quot;:(&quot;enemy enemy&quot;+ state.enemyType  + &quot; loc&quot; + state.enemyLoc);</div><div class="line">        return &lt;div className=&quot;board&quot;&gt;</div><div class="line">            &lt;div className=&quot;roadbed&quot;&gt;&lt;/div&gt;</div><div class="line">            &lt;div className=&quot;road&quot;&#125;&gt;</div><div class="line">                &lt;div className=&#123;state.heroLoc==0?&quot;hero left&quot;:&quot;hero right&quot;&#125;&gt;&lt;/div&gt;</div><div class="line">                &lt;div className=&#123;enemyCls&#125;&gt;&lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;span className=&quot;start&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;span className=&quot;kilo&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;div className=&quot;failbub&quot;&gt;</div><div class="line">                &lt;span className=&quot;failtext&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span className=&quot;retry&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;span className = &#123;state.gameState==0?&quot;start&quot;:&quot;start hide&quot;&#125; onClick = &#123;this.gameStart&#125;&gt;&lt;/span&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(&lt;GameBoard/&gt;,document.getElementById(&quot;reactGame&quot;));</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>游戏开始后，调用 createEnemy，每隔1s并确保动画执行完毕后，重新为 enemy 设置随机的方向和车型。<br>至此，我们已经完成马路的运动，主角的控制和敌方的创建。</p>
<p>第四步：碰撞检测</p>
<p>游戏已经成功跑起来了，但仅仅是一些控制操作和效果动画的运行，并没有核心的游戏逻辑，下面我们加入游戏的核心逻辑，碰撞检测<br>如何判断主角与敌方小车碰撞到一起了？其实思路很简单，我方小车与敌方小车位于同一车道，且敌方小车的运动距离大于舞台高度-我方小车高度，即两车相撞</p>
<p>这个值我们计算出来写死就行，也可以通过 javascript 计算。</p>
<p>大家都知道，大部分游戏都需要一个不断刷新的定时器实时获取和更新状态，即游戏刷新频率（正常为60HZ）<br>所以我们设置一个定时器 Tick，来实时获取敌方小车与我方小车的方向与位置数据，判断小车是否相撞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">var Tick;</div><div class="line">var GameBoard = React.createClass(&#123;</div><div class="line">    getInitialState : function()&#123;</div><div class="line">        return &#123;</div><div class="line">            gameState : 0,</div><div class="line">            heroLoc : 0,</div><div class="line">            enemyLoc: 0,</div><div class="line">            enemyType : 0,</div><div class="line">            aniEnd : true,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    gameStart : function()&#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            gameState : 1</div><div class="line">        &#125;);</div><div class="line">        createEnemy();</div><div class="line">        this.gameTick();</div><div class="line">    &#125;,</div><div class="line">    gameHandle : function(e)&#123;</div><div class="line">        if(this.state.gameState ==1)&#123;</div><div class="line">            switch(e.keyCode)&#123;</div><div class="line">                case 37:</div><div class="line">                    this.setState(&#123;heroLoc : 0&#125;);</div><div class="line">                    break;</div><div class="line">                case 39:</div><div class="line">                    this.setState(&#123;heroLoc : 1&#125;);</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    createEnemy : function()&#123;</div><div class="line">        var that = this,</div><div class="line">        var enemyClass,enemyLoc,enemyType,</div><div class="line">              animationEnd = true;</div><div class="line">        setInterval(function()&#123;</div><div class="line">            if(that.state.aniEnd &amp;&amp; that.state.gameState == 1)&#123;</div><div class="line">                that.setState(&#123;aniEnd : false&#125;);</div><div class="line">                enemyType = Math.floor(Math.random()*3);</div><div class="line">                enemyLoc = Math.round(Math.random());</div><div class="line">                that.setState(&#123;enemyLoc : enemyLoc&#125;);</div><div class="line">                that.setState(&#123;enemyType : enemyType&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;,1000);</div><div class="line">        that.refs.enemy.addEventListener(&quot;webkitAnimationEnd&quot;,function()&#123;</div><div class="line">            that.setState(&#123;aniEnd : true&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    gameTick : function(state)&#123;</div><div class="line">        var that = this,</div><div class="line">            crash = 620,</div><div class="line">            heroLoc,enemyLoc,trs,dis,kilometer = 0;</div><div class="line">        if(state)&#123;</div><div class="line">            Tick = setInterval(function()&#123;</div><div class="line">                trs = window.getComputedStyle(that.refs.enemy,null).getPropertyValue(&quot;transform&quot;);</div><div class="line">                dis = trs.split(&quot;,&quot;)[5].replace(&quot;)&quot;,&quot;&quot;);</div><div class="line">                heroLoc = that.state.heroLoc;</div><div class="line">                enemyLoc = that.state.enemyLoc;</div><div class="line">                if(dis&gt;crash &amp;&amp;dis&lt;(crash+220) &amp;&amp; heroLoc == enemyLoc)&#123;</div><div class="line">                    that.gameOver();</div><div class="line">                &#125;</div><div class="line">                kilometer ++;</div><div class="line">                that.setState(&#123;kilometer:kilometer&#125;);</div><div class="line">            &#125;,10);</div><div class="line">        &#125;else&#123;</div><div class="line">            clearInterval(Tick);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    gameOver : function()&#123;</div><div class="line">        this.setState(&#123;gameState : 0&#125;);</div><div class="line">        this.gameTick(false);</div><div class="line">    &#125;,</div><div class="line">    componentDidMount:function()&#123;</div><div class="line">        window.addEventListener(&quot;keydown&quot;, this.gameHandle, false);</div><div class="line">    &#125;,</div><div class="line">    render : function()&#123;</div><div class="line">        var state = this.state;</div><div class="line">        var enemyCls = state.gameStart == 0 ?&quot;enemy&quot;:(&quot;enemy enemy&quot;+ state.enemyType  + &quot; loc&quot; + state.enemyLoc);</div><div class="line">        return &lt;div className=&quot;board&quot;&gt;</div><div class="line">            &lt;div className=&quot;roadbed&quot;&gt;&lt;/div&gt;</div><div class="line">            &lt;div className=&quot;road&quot;&#125;&gt;</div><div class="line">                &lt;div className=&#123;state.heroLoc==0?&quot;hero left&quot;:&quot;hero right&quot;&#125;&gt;&lt;/div&gt;</div><div class="line">                &lt;div className=&#123;enemyCls&#125;&gt;&lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;span className=&quot;start&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;span className=&quot;kilo&quot;&gt;&#123;state.kilometer&#125;&lt;/span&gt;</div><div class="line">            &lt;div className=&quot;failbub&quot;&gt;</div><div class="line">                &lt;span className=&quot;failtext&quot;&gt;&lt;/span&gt;</div><div class="line">                &lt;span className=&quot;retry&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;span className = &#123;state.gameState==0?&quot;start&quot;:&quot;start hide&quot;&#125; onClick = &#123;this.gameStart&#125;&gt;&lt;/span&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(&lt;GameBoard/&gt;,document.getElementById(&quot;reactGame&quot;));</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这里我们顺便把公里数实时更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span className=&quot;kilo&quot;&gt;&#123;state.kilometer&#125;&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<p>至此，我们已经完成了一个相对完整的小游戏</p>
<p>四、更多细节<br>游戏仅仅是可玩远远不够，我们可以慢慢加入一些细节提高游戏性，比如让敌方车辆的速度随机，出现的频率随游戏难度增加，<br>每跑1000km获得一次无敌模式，开启后5s内可以随意碰撞：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/babel&quot;&gt;</div><div class="line">var Tick;</div><div class="line">var GameBoard = React.createClass(&#123;</div><div class="line">    getInitialState : function()&#123;</div><div class="line">        return &#123;</div><div class="line">            gameState : 0,</div><div class="line">            heroLoc : 0,</div><div class="line">            enemyLoc: 0,</div><div class="line">            enemyType : 0,</div><div class="line">            aniEnd : true,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    gameStart : function()&#123;</div><div class="line">        this.setState(&#123;</div><div class="line">            gameState : 1</div><div class="line">        &#125;);</div><div class="line">        createEnemy();</div><div class="line">        this.gameTick();</div><div class="line">    &#125;,</div><div class="line">    gameHandle : function(e)&#123;</div><div class="line">        if(this.state.gameState ==1)&#123;</div><div class="line">            switch(e.keyCode)&#123;</div><div class="line">                case 37:</div><div class="line">                    this.setState(&#123;heroLoc : 0&#125;);</div><div class="line">                    break;</div><div class="line">                case 39:</div><div class="line">                    this.setState(&#123;heroLoc : 1&#125;);</div><div class="line">                    break;</div><div class="line">                case 32:</div><div class="line">                    if(this.state.hasSuper==1)&#123;</div><div class="line">                        this.setState(&#123;superMode : 1&#125;);</div><div class="line">                        this.setState(&#123;hasSuper : 0&#125;);</div><div class="line">                    &#125;</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    superBuff : function()&#123;</div><div class="line">        var that = this;</div><div class="line">        that.setState(&#123;chunge : 1&#125;);</div><div class="line">        setTimeout(function()&#123;</div><div class="line">            that.setState(&#123;chunge : 0&#125;);</div><div class="line">        &#125;,1000);</div><div class="line">    &#125;,</div><div class="line">    superMode : function()&#123;</div><div class="line">        var that = this;</div><div class="line">        that.setState(&#123;hasSuper : 1&#125;);</div><div class="line">        setTimeout(function()&#123;</div><div class="line">            that.setState(&#123;superMode : 0&#125;);</div><div class="line">        &#125;,5000);</div><div class="line">    &#125;,</div><div class="line">    createEnemy : function()&#123;</div><div class="line">        var that = this,</div><div class="line">        var enemyClass,enemyLoc,enemyType,</div><div class="line">              animationEnd = true;</div><div class="line">        setInterval(function()&#123;</div><div class="line">            if(that.state.aniEnd &amp;&amp; that.state.gameState == 1)&#123;</div><div class="line">                that.setState(&#123;aniEnd : false&#125;);</div><div class="line">                enemyType = Math.floor(Math.random()*3);</div><div class="line">                enemyLoc = Math.round(Math.random());</div><div class="line">                that.setState(&#123;enemyLoc : enemyLoc&#125;);</div><div class="line">                that.setState(&#123;enemyType : enemyType&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;,1000);</div><div class="line">        that.refs.enemy.addEventListener(&quot;webkitAnimationEnd&quot;,function()&#123;</div><div class="line">            that.setState(&#123;aniEnd : true&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    gameTick : function(state)&#123;</div><div class="line">        var that = this,</div><div class="line">            crash = 620,</div><div class="line">            heroLoc,enemyLoc,trs,dis,kilometer = 0;</div><div class="line">        if(state)&#123;</div><div class="line">            Tick = setInterval(function()&#123;</div><div class="line">                trs = window.getComputedStyle(that.refs.enemy,null).getPropertyValue(&quot;transform&quot;);</div><div class="line">                dis = trs.split(&quot;,&quot;)[5].replace(&quot;)&quot;,&quot;&quot;);</div><div class="line">                heroLoc = that.state.heroLoc;</div><div class="line">                enemyLoc = that.state.enemyLoc;</div><div class="line">                if(dis&gt;crash &amp;&amp;dis&lt;(crash+220) &amp;&amp; heroLoc == enemyLoc)&#123;</div><div class="line">                    that.gameOver();</div><div class="line">                &#125;</div><div class="line">                kilometer ++;</div><div class="line">                that.setState(&#123;kilometer:kilometer&#125;);</div><div class="line">                if(kilometer%1000==0)&#123;</div><div class="line">                    that.superMode();</div><div class="line">                &#125;</div><div class="line">            &#125;,10);</div><div class="line">        &#125;else&#123;</div><div class="line">            clearInterval(Tick);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    gameOver : function()&#123;</div><div class="line">        this.setState(&#123;gameState : 0&#125;);</div><div class="line">        this.gameTick(false);</div><div class="line">    &#125;,</div><div class="line">    componentDidMount:function()&#123;</div><div class="line">        window.addEventListener(&quot;keydown&quot;, this.gameHandle, false);</div><div class="line">    &#125;,</div><div class="line">    render : function()&#123;</div><div class="line">        var state = this.state;</div><div class="line">        var enemyCls = state.gameStart == 0 ?&quot;enemy&quot;:(&quot;enemy enemy&quot;+ state.enemyType  + &quot; loc&quot; + state.enemyLoc);</div><div class="line">        return &lt;div className=&quot;board&quot;&gt;</div><div class="line">            &lt;div className=&quot;roadbed&quot;&gt;&lt;/div&gt;</div><div class="line">            &lt;div className=&quot;road&quot;&#125;&gt;</div><div class="line">                &lt;div className=&#123;state.heroLoc==0?&quot;hero left&quot;:&quot;hero right&quot;&#125;&gt;&lt;/div&gt;</div><div class="line">                &lt;div className=&#123;enemyCls&#125;&gt;&lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;span className=&quot;start&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;span className=&quot;kilo&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;div className=&quot;failbub&quot;&gt;</div><div class="line">                &lt;span className=&quot;failtext&quot;&gt;&#123;state.kilometer&#125;&lt;/span&gt;</div><div class="line">                &lt;span className=&quot;retry&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;span className = &#123;state.gameState==0?&quot;start&quot;:&quot;start hide&quot;&#125; onClick = &#123;this.gameStart&#125;&gt;&lt;/span&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(&lt;GameBoard/&gt;,document.getElementById(&quot;reactGame&quot;));</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>最后加入重力感应，控制小车运动，让游戏在移动端解放双手：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">window.addEventListener(&quot;devicemotion&quot;, function(event) &#123;</div><div class="line">            var eventaccelerationIncludingGravity = event.accelerationIncludingGravity;</div><div class="line">            if(that.state.gameState == 1)&#123;</div><div class="line">                if(eventaccelerationIncludingGravity.x &lt; -1)&#123;</div><div class="line">                    that.setState(&#123;heroLoc : 0&#125;);</div><div class="line">                &#125;else if(eventaccelerationIncludingGravity.x &gt; 1)&#123;</div><div class="line">                    that.setState(&#123;heroLoc : 1&#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">&#125;, false);</div></pre></td></tr></table></figure></p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近研究egret引擎时，在论坛看到了用egret引擎写的一款赛车游戏&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://77flwk.com1.z0.glb.clouddn.com/cargame.png&quot; alt=&quot;游戏截图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>知道这20个正则表达式，能让你少写1,000行代码</title>
    <link href="http://yoursite.com/2016/08/20/about-reg/"/>
    <id>http://yoursite.com/2016/08/20/about-reg/</id>
    <published>2016-08-20T06:24:00.000Z</published>
    <updated>2016-08-20T06:25:13.431Z</updated>
    
    <content type="html"><![CDATA[<p> 正则表达式，一个十分古老而又强大的文本处理工具，仅仅用一段非常简短的表达式语句，便能够快速实现一个非常复杂的业务逻辑。熟练地掌握正则表达式的话，能够使你的开发效率得到极大的提升。</p>
<p>正则表达式经常被用于字段或任意字符串的校验，如下面这段校验基本日期格式的JavaScript代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /^(\\d&#123;1,4&#125;)(-|\\/)(\\d&#123;1,2&#125;)\\2(\\d&#123;1,2&#125;)$/; </div><div class="line">var r = fieldValue.match(reg);             </div><div class="line">if(r==null)alert(&apos;Date format error!&apos;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>下面是技匠整理的，在前端开发中经常使用到的20个正则表达式:</p>
<p>1 . 校验密码强度<br>密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</div></pre></td></tr></table></figure></p>
<ol>
<li><p>校验中文<br>字符串仅能是中文。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[\\u4e00-\\u9fa5]&#123;0,&#125;$</div></pre></td></tr></table></figure>
</li>
<li><p>由数字、26个英文字母或下划线组成的字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\\w+$</div></pre></td></tr></table></figure>
</li>
<li><p>校验E-Mail 地址<br>同密码一样，下面是E-mail地址合规性的正则检查语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[\\w!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?</div></pre></td></tr></table></figure>
</li>
<li><p>校验身份证号码<br>下面是身份证号码的正则校验。15 或 18位。</p>
</li>
</ol>
<p>15位：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$</div></pre></td></tr></table></figure></p>
<p>18位:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;([0-9]|X)$</div></pre></td></tr></table></figure></p>
<ol>
<li><p>校验日期<br>“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$</div></pre></td></tr></table></figure>
</li>
<li><p>校验金额<br>金额校验，精确到2位小数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[0-9]+(.[0-9]&#123;2&#125;)?$</div></pre></td></tr></table></figure>
</li>
<li><p>校验手机号<br>下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$</div></pre></td></tr></table></figure>
</li>
<li><p>判断IE的版本<br>IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$</div></pre></td></tr></table></figure>
</li>
<li><p>校验IP-v4地址<br>IP4 正则语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b</div></pre></td></tr></table></figure>
</li>
<li><p>校验IP-v6地址<br>IP6 正则语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(([0-9a-fA-F]&#123;1,4&#125;:)&#123;7,7&#125;[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,7&#125;:|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,6&#125;:[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,5&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,3&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,2&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|[0-9a-fA-F]&#123;1,4&#125;:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,6&#125;)|:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,7&#125;|:)|fe80:(:[0-9a-fA-F]&#123;0,4&#125;)&#123;0,4&#125;%[0-9a-zA-Z]&#123;1,&#125;|::(ffff(:0&#123;1,4&#125;)&#123;0,1&#125;:)&#123;0,1&#125;((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;:((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9]))</div></pre></td></tr></table></figure>
</li>
<li><p>检查URL的前缀<br>应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (!s.match(/^[a-zA-Z]+:\\/\\//))</div><div class="line">&#123;</div><div class="line">    s = &apos;http://&apos; + s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>提取URL链接<br>下面的这个表达式可以筛选出一段文本中的URL。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(f|ht)&#123;1&#125;(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?</div></pre></td></tr></table></figure>
</li>
<li><p>文件路径及扩展名校验<br>验证windows下文件路径和扩展名（下面的例子中为.txt文件）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?&quot;&lt;&gt;|]+\\.txt(l)?$</div></pre></td></tr></table></figure>
</li>
<li><p>提取Color Hex Codes<br>有时需要抽取网页中的颜色代码，可以使用下面的表达式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^#([A-Fa-f0-9]&#123;6&#125;|[A-Fa-f0-9]&#123;3&#125;)$</div></pre></td></tr></table></figure>
</li>
<li><p>提取网页图片<br>假若你想提取网页中所有图片信息，可以利用下面的表达式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\\&lt; *[img][^\\\\&gt;]*[src] *= *[\\&quot;\\&apos;]&#123;0,1&#125;([^\\&quot;\\&apos;\\ &gt;]*)</div></pre></td></tr></table></figure>
</li>
<li><p>提取页面超链接<br>提取html中的超链接。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&lt;a\\s*(?!.*\\brel=)[^&gt;]*)(href=&quot;https?:\\/\\/)((?!(?:(?:www\\.)?&apos;.implode(&apos;|(?:www\\.)?&apos;, $follow_list).&apos;))[^&quot;]+)&quot;((?!.*\\brel=)[^&gt;]*)(?:[^&gt;]*)&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>查找CSS属性<br>通过下面的表达式，可以搜索到相匹配的CSS属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\\s*[a-zA-Z\\-]+\\s*[:]&#123;1&#125;\\s[a-zA-Z0-9\\s.#]+[;]&#123;1&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>抽取注释<br>如果你需要移除HMTL中的注释，可以使用如下的表达式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--(.*?)--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>匹配HTML标签<br>通过下面的表达式可以匹配出HTML中的标签属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;\\/?\\w+((\\s+\\w+(\\s*=\\s*(?:&quot;.*?&quot;|&apos;.*?&apos;|[\\^&apos;&quot;&gt;\\s]+))?)+\\s*|\\s*)\\/?&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>正则表达式的相关语法<br>下面是我找到的一张非常不错的正则表达式 Cheat Sheet，可以用来快速查找相关语法。<br><img src="http://upload-images.jianshu.io/upload_images/1399853-1b08244a4d375624.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原图 by zeng"></p>
<p>正则表达式在线测试工具<br><a href="https://regex101.com/#javascript" title="regex101" target="_blank" rel="external">regex101</a>是一个非常不错的正则表达式在线测试工具，你可以直接在线测试你的正则表达式哦。<br><img src="http://upload-images.jianshu.io/upload_images/1399853-2c13bde71d91694c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原图 by zeng"></p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 正则表达式，一个十分古老而又强大的文本处理工具，仅仅用一段非常简短的表达式语句，便能够快速实现一个非常复杂的业务逻辑。熟练地掌握正则表达式的话，能够使你的开发效率得到极大的提升。&lt;/p&gt;
&lt;p&gt;正则表达式经常被用于字段或任意字符串的校验，如下面这段校验基本日期格式的JavaScript代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var reg = /^(\\d&amp;#123;1,4&amp;#125;)(-|\\/)(\\d&amp;#123;1,2&amp;#125;)\\2(\\d&amp;#123;1,2&amp;#125;)$/; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var r = fieldValue.match(reg);             &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if(r==null)alert(&amp;apos;Date format error!&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="经验" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="regret" scheme="http://yoursite.com/tags/regret/"/>
    
  </entry>
  
  <entry>
    <title>JS身份证验证 </title>
    <link href="http://yoursite.com/2016/08/19/js-id/"/>
    <id>http://yoursite.com/2016/08/19/js-id/</id>
    <published>2016-08-19T06:54:00.000Z</published>
    <updated>2016-08-31T06:46:58.472Z</updated>
    
    <content type="html"><![CDATA[<p>根据〖中华人民共和国国家标准 GB 11643-1999〗中有关公民身份号码的规定，公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。<br>排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。<br><a id="more"></a><br>地址码表示编码对象常住户口所在县(市、旗、区)的行政区划代码。<br>出生日期码表示编码对象出生的年、月、日，其中年份用四位数字表示，年、月、日之间不用分隔符。<br>顺序码表示同一地址码所标识的区域范围内，对同年、月、日出生的人员编定的顺序号。顺序码的奇数分给男性，偶数分给女性。<br>校验码是根据前面十七位数字码，按照ISO 7064:1983.MOD 11-2校验码计算出来的检验码。</p>
<p>出生日期计算方法。<br>15位的身份证编码首先把出生年扩展为4位，简单的就是增加一个19或18,这样就包含了所有1800-1999年出生的人;<br>2000年后出生的肯定都是18位的了没有这个烦恼，至于1800年前出生的,那啥那时应该还没身份证号这个东东。<br>下面是正则表达式:<br>出生日期1800-2099  (18|19|20)?\d{2}(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])<br>身份证正则表达式 /^\d{6}(18|19|20)?\d{2}(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])\d{3}(\d|X)$/i<br>15位校验规则 6位地址编码+6位出生日期+3位顺序号<br>18位校验规则 6位地址编码+8位出生日期+3位顺序号+1位校验位</p>
<p>校验位规则<br>公式:∑(ai×Wi)(mod 11)……………………………………(1)<br>公式(1)中：<br>i—-表示号码字符从由至左包括校验码在内的位置序号；<br>ai—-表示第i位置上的号码字符值；<br>Wi—-示第i位置上的加权因子，其数值依据公式Wi=2^(n-1）(mod 11)计算得出。<br>i 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1<br>Wi 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var alert_tip = &quot;&quot;; // 用于提示</div><div class="line">function IdentityCodeValid(code) &#123; </div><div class="line">	var city=&#123;11:&quot;北京&quot;,12:&quot;天津&quot;,13:&quot;河北&quot;,14:&quot;山西&quot;,15:&quot;内蒙古&quot;,21:&quot;辽宁&quot;,22:&quot;吉林&quot;,23:&quot;黑龙江 &quot;,31:&quot;上海&quot;,32:&quot;江苏&quot;,33:&quot;浙江&quot;,34:&quot;安徽&quot;,35:&quot;福建&quot;,36:&quot;江西&quot;,37:&quot;山东&quot;,41:&quot;河南&quot;,42:&quot;湖北 &quot;,43:&quot;湖南&quot;,44:&quot;广东&quot;,45:&quot;广西&quot;,46:&quot;海南&quot;,50:&quot;重庆&quot;,51:&quot;四川&quot;,52:&quot;贵州&quot;,53:&quot;云南&quot;,54:&quot;西藏 &quot;,61:&quot;陕西&quot;,62:&quot;甘肃&quot;,63:&quot;青海&quot;,64:&quot;宁夏&quot;,65:&quot;新疆&quot;,71:&quot;台湾&quot;,81:&quot;香港&quot;,82:&quot;澳门&quot;,91:&quot;国外 &quot;&#125;;</div><div class="line">	var pass= true;</div><div class="line">	if(!code || !/^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;(\d|X)$/i.test(code))&#123;</div><div class="line">		alert_tip = &quot;身份证号格式错误&quot;;</div><div class="line">		pass = false;</div><div class="line">	&#125; else if(!city[code.substr(0,2)])&#123;</div><div class="line">		alert_tip = &quot;地址编码错误&quot;;</div><div class="line">		pass = false;</div><div class="line">	&#125; else&#123;</div><div class="line">		//18位身份证需要验证最后一位校验位</div><div class="line">		if(code.length == 18)&#123;</div><div class="line">			code = code.split(&apos;&apos;);</div><div class="line">			//∑(ai×Wi)(mod 11)</div><div class="line">			//加权因子</div><div class="line">			var factor = [ 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 ];</div><div class="line">			//校验位</div><div class="line">			var parity = [ 1, 0, &apos;X&apos;, 9, 8, 7, 6, 5, 4, 3, 2 ];</div><div class="line">			var sum = 0;</div><div class="line">			var ai = 0;</div><div class="line">			var wi = 0;</div><div class="line">			for (var i = 0; i &lt; 17; i++)</div><div class="line">			&#123;</div><div class="line">				ai = code[i];</div><div class="line">				wi = factor[i];</div><div class="line">				sum += ai * wi;</div><div class="line">			&#125;</div><div class="line">			var last = parity[sum % 11];</div><div class="line">			if(parity[sum % 11] != code[17])&#123;</div><div class="line">				alert_tip = &quot;校验位错误(X需大写)&quot;;</div><div class="line">				pass =false;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return pass;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据〖中华人民共和国国家标准 GB 11643-1999〗中有关公民身份号码的规定，公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。&lt;br&gt;排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>js继承的那些事</title>
    <link href="http://yoursite.com/2016/08/19/js-prototype/"/>
    <id>http://yoursite.com/2016/08/19/js-prototype/</id>
    <published>2016-08-19T02:54:00.000Z</published>
    <updated>2016-08-19T03:24:40.043Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说，先上代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 约定</div><div class="line"> */</div><div class="line">function Fun()&#123;</div><div class="line">    // 私有属性</div><div class="line">    var val = 1;        // 私有基本属性</div><div class="line">    var arr = [1];      // 私有引用属性</div><div class="line">    function fun()&#123;&#125;    // 私有函数（引用属性）</div><div class="line"> </div><div class="line">    // 实例属性</div><div class="line">    this.val = 1;               // 实例基本属性</div><div class="line">    this.arr = [1];             // 实例引用属性</div><div class="line">    this.fun = function()&#123;&#125;;    // 实例函数（引用属性）</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 原型属性</div><div class="line">Fun.prototype.val = 1;              // 原型基本属性</div><div class="line">Fun.prototype.arr = [1];            // 原型引用属性</div><div class="line">Fun.prototype.fun = function()&#123;&#125;;   // 原型函数（引用属性）</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>js两种常见的继承方法：</p>
<p>原型链继承（对象间的继承）<br>类式继承（构造函数间的继承）</p>
<p>由于js不像java那样是真正面向对象的语言，js是基于对象的，它没有类的概念。所以，要想实现继承，可以用js的原型prototype机制或者用apply和call方法去实现</p>
<p>在面向对象的语言中，我们使用类来创建一个自定义对象。然而js中所有事物都是对象，那么用什么办法来创建自定义对象呢？这就需要用到js的原型：</p>
<p>我们可以简单的把prototype看做是一个模版，新创建的自定义对象都是这个模版（prototype）的一个拷贝 （实际上不是拷贝而是链接，只不过这种链接是不可见，新实例化的对象内部有一个看不见的<strong>Proto</strong>指针，指向原型对象）。</p>
<p>js可以通过构造函数和原型的方式模拟实现类的功能。 另外，js类式继承的实现也是依靠原型链来实现的。</p>
<p>#原型链继承和类式继承</p>
<p>类式继承是在子类型构造函数的内部调用超类型的构造函数。<br>严格的类式继承并不是很常见，一般都是组合着用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Super()&#123;</div><div class="line">    this.colors=[&quot;red&quot;,&quot;blue&quot;];</div><div class="line">&#125;</div><div class="line"> </div><div class="line">function Sub()&#123;</div><div class="line">    Super.call(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原型链继承</p>
<p>原型式继承是借助已有的对象创建新的对象，将子类的原型指向父类，就相当于加入了父类这条原型链</p>
<p>为了让子类继承父类的属性（也包括方法），首先需要定义一个构造函数。然后，将父类的新实例赋值给构造函数的原型。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">	&lt;script&gt;</div><div class="line">    function Parent()&#123;</div><div class="line">        this.name = &apos;mike&apos;;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function Child()&#123;</div><div class="line">        this.age = 12;</div><div class="line">    &#125;</div><div class="line">    Child.prototype = new Parent();//Child继承Parent，通过原型，形成链条</div><div class="line"> </div><div class="line">    var test = new Child();</div><div class="line">    alert(test.age);</div><div class="line">    alert(test.name);//得到被继承的属性</div><div class="line">    //继续原型链继承</div><div class="line">    function Brother()&#123;   //brother构造</div><div class="line">        this.weight = 60;</div><div class="line">    &#125;</div><div class="line">    Brother.prototype = new Child();//继续原型链继承</div><div class="line">    var brother = new Brother();</div><div class="line">    alert(brother.name);//继承了Parent和Child,弹出mike</div><div class="line">    alert(brother.age);//弹出12</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>以上原型链继承还缺少一环，那就是Object，所有的构造函数都继承自Object。而继承Object是自动完成的，并不需要我们自己手动继承，那么他们的从属关系是怎样的呢？</p>
<p>#确定原型和实例的关系<br>可以通过两种方式来确定原型和实例之间的关系。操作符instanceof和isPrototypeof()方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alert(brother instanceof Object)//true</div><div class="line">alert(test instanceof Brother);//false,test 是brother的超类</div><div class="line">alert(brother instanceof Child);//true</div><div class="line">alert(brother instanceof Parent);//true</div></pre></td></tr></table></figure></p>
<p>只要是原型链中出现过的原型，都可以说是该原型链派生的实例的原型，因此，isPrototypeof()方法也会返回true</p>
<p>在js中，被继承的函数称为超类型（父类，基类也行），继承的函数称为子类型（子类，派生类）。使用原型继承主要由两个问题：<br>一是字面量重写原型会中断关系，使用引用类型的原型，并且子类型还无法给超类型传递参数。</p>
<p>伪类解决引用共享和超类型无法传参的问题，我们可以采用“借用构造函数”技术</p>
<p>借用构造函数（类式继承）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">	&lt;script&gt;</div><div class="line">    function Parent(age)&#123;</div><div class="line">        this.name = [&apos;mike&apos;,&apos;jack&apos;,&apos;smith&apos;];</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function Child(age)&#123;</div><div class="line">        Parent.call(this,age);</div><div class="line">    &#125;</div><div class="line">    var test = new Child(21);</div><div class="line">    alert(test.age);//21</div><div class="line">    alert(test.name);//mike,jack,smith</div><div class="line">    test.name.push(&apos;bill&apos;);</div><div class="line">    alert(test.name);//mike,jack,smith,bill</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>借用构造函数虽然解决了刚才两种问题，但没有原型，则复用无从谈起，所以我们需要原型链+借用构造函数的模式，这种模式称为组合继承</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    function Parent(age)&#123;</div><div class="line">        this.name = [&apos;mike&apos;,&apos;jack&apos;,&apos;smith&apos;];</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">    Parent.prototype.run = function () &#123;</div><div class="line">        return this.name  + &apos; are both&apos; + this.age;</div><div class="line">    &#125;;</div><div class="line">    function Child(age)&#123;</div><div class="line">        Parent.call(this,age);//对象冒充，给超类型传参</div><div class="line">    &#125;</div><div class="line">    Child.prototype = new Parent();//原型链继承</div><div class="line">    var test = new Child(21);//写new Parent(21)也行</div><div class="line">    alert(test.run());//mike,jack,smith are both21</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>组合式继承是比较常用的一种继承方法，其背后的思路是 使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又保证每个实例都有它自己的属性。</p>
<p>call()的用法：调用一个对象的一个方法，以另一个对象替换当前对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">call([thisObj[,arg1[, arg2[, [,.argN]]]]])</div></pre></td></tr></table></figure></p>
<p>#原型式继承</p>
<p>这种继承借助原型并基于已有的对象创建新对象，同时还不用创建自定义类型的方式称为原型式继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">	&lt;script&gt;</div><div class="line">     function obj(o)&#123;</div><div class="line">         function F()&#123;&#125;</div><div class="line">         F.prototype = o;</div><div class="line">         return new F();</div><div class="line">     &#125;</div><div class="line">    var box = &#123;</div><div class="line">        name : &apos;trigkit4&apos;,</div><div class="line">        arr : [&apos;brother&apos;,&apos;sister&apos;,&apos;baba&apos;]</div><div class="line">    &#125;;</div><div class="line">    var b1 = obj(box);</div><div class="line">    alert(b1.name);//trigkit4</div><div class="line"> </div><div class="line">    b1.name = &apos;mike&apos;;</div><div class="line">    alert(b1.name);//mike</div><div class="line"> </div><div class="line">    alert(b1.arr);//brother,sister,baba</div><div class="line">    b1.arr.push(&apos;parents&apos;);</div><div class="line">    alert(b1.arr);//brother,sister,baba,parents</div><div class="line"> </div><div class="line">    var b2 = obj(box);</div><div class="line">    alert(b2.name);//trigkit4</div><div class="line">    alert(b2.arr);//brother,sister,baba,parents</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>原型式继承首先在obj()函数内部创建一个临时性的构造函数 ，然后将传入的对象作为这个构造函数的原型，最后返回这个临时类型的一个新实例。</p>
<p>#寄生式继承<br>这种继承方式是把原型式+工厂模式结合起来，目的是为了封装创建的过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	&lt;script&gt;</div><div class="line">    function create(o)&#123;</div><div class="line">        var f= obj(o);</div><div class="line">        f.run = function () &#123;</div><div class="line">            return this.arr;//同样，会共享引用</div><div class="line">        &#125;;</div><div class="line">        return f;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>组合式继承的小问题</p>
<p>组合式继承是js最常用的继承模式，但组合继承的超类型在使用过程中会被调用两次；一次是创建子类型的时候，另一次是在子类型构造函数的内部</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	&lt;script&gt;</div><div class="line">    function Parent(name)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.arr = [&apos;哥哥&apos;,&apos;妹妹&apos;,&apos;父母&apos;];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    Parent.prototype.run = function () &#123;</div><div class="line">        return this.name;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    function Child(name,age)&#123;</div><div class="line">        Parent.call(this,age);//第二次调用</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    Child.prototype = new Parent();//第一次调用</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>#寄生组合式继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">	&lt;script&gt;</div><div class="line">    function obj(o)&#123;</div><div class="line">        function F()&#123;&#125;</div><div class="line">        F.prototype = o;</div><div class="line">        return new F();</div><div class="line">    &#125;</div><div class="line">    function create(parent,test)&#123;</div><div class="line">        var f = obj(parent.prototype);//创建对象</div><div class="line">        f.constructor = test;//增强对象</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    function Parent(name)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.arr = [&apos;brother&apos;,&apos;sister&apos;,&apos;parents&apos;];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    Parent.prototype.run = function () &#123;</div><div class="line">        return this.name;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    function Child(name,age)&#123;</div><div class="line">        Parent.call(this,name);</div><div class="line">        this.age =age;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    inheritPrototype(Parent,Child);//通过这里实现继承</div><div class="line"> </div><div class="line">    var test = new Child(&apos;trigkit4&apos;,21);</div><div class="line">    test.arr.push(&apos;nephew&apos;);</div><div class="line">    alert(test.arr);//</div><div class="line">    alert(test.run());//只共享了方法</div><div class="line"> </div><div class="line">    var test2 = new Child(&apos;jack&apos;,22);</div><div class="line">    alert(test2.arr);//引用问题解决</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>#call和apply<br>全局函数apply和call可以用来改变函数中this的指向，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 定义一个全局函数</div><div class="line">function foo() &#123;</div><div class="line">console.log(this.fruit);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 定义一个全局变量</div><div class="line">var fruit = &quot;apple&quot;;</div><div class="line">// 自定义一个对象</div><div class="line">var pack = &#123;</div><div class="line">fruit: &quot;orange&quot;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 等价于window.foo();</div><div class="line">foo.apply(window);  // &quot;apple&quot;,此时this等于window</div><div class="line">// 此时foo中的this === pack</div><div class="line">foo.apply(pack);    // &quot;orange&quot;</div></pre></td></tr></table></figure>
<p> end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话不多说，先上代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 约定&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function Fun()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 私有属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var val = 1;        // 私有基本属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var arr = [1];      // 私有引用属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    function fun()&amp;#123;&amp;#125;    // 私有函数（引用属性）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 实例属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    this.val = 1;               // 实例基本属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    this.arr = [1];             // 实例引用属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    this.fun = function()&amp;#123;&amp;#125;;    // 实例函数（引用属性）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 原型属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fun.prototype.val = 1;              // 原型基本属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fun.prototype.arr = [1];            // 原型引用属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fun.prototype.fun = function()&amp;#123;&amp;#125;;   // 原型函数（引用属性）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>关于From表单及常用的一些正则</title>
    <link href="http://yoursite.com/2016/08/18/about-form/"/>
    <id>http://yoursite.com/2016/08/18/about-form/</id>
    <published>2016-08-18T09:24:00.000Z</published>
    <updated>2016-08-19T03:26:13.322Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做手机页面时，遇到数字输入的键盘的问题，之前的做法只是一刀切的使用 type=”tel”，不过一直觉得九宫格的电话号码键盘上的英文字母太碍事了。于是想要尝试其它的实现方案，最终的结论却令人沮丧。不过也趁机详细了解了下pattern这个属性。</p>
<p>type=”tel” 和 type=”number” 的区别</p>
<p>这里还是先那么先交代一下最初遇到的问题。其实无论是tel还是number都不是完美的：</p>
<p>type=”tel”<br>优点是iOS和Android的键盘表现都差不多<br>缺点是那些字母好多余，虽然我没有强迫症但还是感觉怪怪的啊。<br>type=”number”<br>优点是Android下实现的一个真正的数字键盘<br>缺点一：iOS下不是九宫格键盘，输入不方便<br>缺点二：旧版Android（包括微信所用的X5内核）在输入框后面会有超级鸡肋的小尾巴，好在Android 4.4.4以后给去掉了。<br>不过对于缺点二，我们可以用webkit私有的伪元素给fix掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">input[type=number]::-webkit-inner-spin-button,  </div><div class="line">   input[type=number]::-webkit-outer-spin-button &#123; </div><div class="line">       -webkit-appearance: none; </div><div class="line">       appearance: none; </div><div class="line">       margin: 0; </div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>pattern属性<br>pattern用于验证表单输入的内容，通常HTML5的type属性，比如email、tel、number、data类、url等，已经自带了简单的数据格式验证功能了，加上pattern后，前端部分的验证更加简单高效了。</p>
<p>显而易见，pattern的属性值要用正则表达式。</p>
<p>实例</p>
<p>简单的数字验证</p>
<p>数字的验证有两个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;number&quot; pattern=&quot;\d&quot;&gt;  </div><div class="line">&lt;input type=&quot;number&quot; pattern=&quot;[0-9]*&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>对表单验证来说，这两个正则的作用是一样的，表现的话差异就很大：</p>
<p>iOS中，只有[0-9]*才可以调起九宫格数字键盘，\d 无效<br>Android 4.4以下(包括X5内核)，两者都调起数字键盘；<br>Android 4.4.4以上，只认 type 属性，也就是说，如果上面的代码将 type=”number” 改为 type=”text” ，将调起全键盘而不会是九宫格数字键盘。<br>常用的正则表达式</p>
<p>pattern的用法都一样，这里不再啰嗦各种详细写法了，只是列出来一些常用的正则就好了：</p>
<p>信用卡 [0-9]{13,16}<br>银联卡 ^62[0-5]\d{13,16}$<br>Visa: ^4[0-9]{12}(?:[0-9]{3})?$<br>万事达：^5[1-5][0-9]{14}$<br>QQ号码： [1-9][0-9]{4,14}<br>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$<br>身份证：^([0-9]){7,18}(x|X)?$<br>密码：^[a-zA-Z]\w{5,17}$ 字母开头，长度在6~18之间，只能包含字母、数字和下划线<br>强密码：^(?=.\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$ 包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间<br>7个汉字或14个字符：^[\u4e00-\u9fa5]{1,7}$|^[\dA-Za-z_]{1,14}$<br>浏览器支持<br>很不幸，pattern的浏览器支持很惨：<br><a href="http://caniuse.com/#feat=input-pattern" title="via" target="_blank" rel="external">Can I Use</a></p>
<p>但是如果只是如文章开头提到的改数字键盘的话，iOS和Android都是没有问题的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做手机页面时，遇到数字输入的键盘的问题，之前的做法只是一刀切的使用 type=”tel”，不过一直觉得九宫格的电话号码键盘上的英文字母太碍事了。于是想要尝试其它的实现方案，最终的结论却令人沮丧。不过也趁机详细了解了下pattern这个属性。&lt;/p&gt;
&lt;p&gt;type=”tel” 和 type=”number” 的区别&lt;/p&gt;
&lt;p&gt;这里还是先那么先交代一下最初遇到的问题。其实无论是tel还是number都不是完美的：&lt;/p&gt;
&lt;p&gt;type=”tel”&lt;br&gt;优点是iOS和Android的键盘表现都差不多&lt;br&gt;缺点是那些字母好多余，虽然我没有强迫症但还是感觉怪怪的啊。&lt;br&gt;type=”number”&lt;br&gt;优点是Android下实现的一个真正的数字键盘&lt;br&gt;缺点一：iOS下不是九宫格键盘，输入不方便&lt;br&gt;缺点二：旧版Android（包括微信所用的X5内核）在输入框后面会有超级鸡肋的小尾巴，好在Android 4.4.4以后给去掉了。&lt;br&gt;不过对于缺点二，我们可以用webkit私有的伪元素给fix掉：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;input[type=number]::-webkit-inner-spin-button,  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   input[type=number]::-webkit-outer-spin-button &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       -webkit-appearance: none; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       appearance: none; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       margin: 0; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>jQuery开发模式</title>
    <link href="http://yoursite.com/2016/08/18/jquery-modle/"/>
    <id>http://yoursite.com/2016/08/18/jquery-modle/</id>
    <published>2016-08-18T08:24:00.000Z</published>
    <updated>2016-08-19T08:46:45.858Z</updated>
    
    <content type="html"><![CDATA[<p>jquery发展10年，已经是一个非常优秀且成熟的js框架，在平常的开发过程中给了开发者非常多的便利，特别是dom的操作。<br>随着项目的发展，代码复用性更强是一个优秀开发者追求的方向。<br>根据《jQuery高级编程》的描述，jQuery插件开发方式主要有三种：<br>通过$.extend()来扩展jQuery<br>通过$.fn 向jQuery添加新的方法<br>通过$.widget()应用jQuery UI的部件工厂方式创建<br><a id="more"></a><br>　　通常我们使用第二种方法来进行简单插件开发，说简单是相对于第三种方式。第三种方式是用来开发更高级jQuery部件的，该模式开发出来的部件带有很多jQuery内建的特性，比如插件的状态信息自动保存，各种关于插件的常用方法等，非常贴心，这里不细说。<br>　　而第一种方式又太简单，仅仅是在jQuery命名空间或者理解成jQuery身上添加了一个静态方法而以。所以我们调用通过$.extend()添加的函数时直接通过$符号调用（$.myfunction()）而不需要选中DOM元素($(‘#example’).myfunction())。请看下面的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.extend(&#123;</div><div class="line">sayHello: function(name) &#123;</div><div class="line">    console.log(&apos;Hello,&apos; + (name ? name : &apos;Dude&apos;) + &apos;!&apos;);</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">$.sayHello(); //调用</div><div class="line">$.sayHello(&apos;Wayou&apos;); //带参调用</div></pre></td></tr></table></figure>
<p>上面代码中，通过$.extend()向jQuery添加了一个sayHello函数，然后通过$直接调用。到此你可以认为我们已经完成了一个简单的jQuery插件了。<br>　　但如你所见，这种方式用来定义一些辅助方法是比较方便的。比如一个自定义的console，输出特定格式的信息，定义一次后可以通过jQuery在程序中任何需要的地方调用它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">	$.extend(&#123;</div><div class="line">    log: function(message) &#123;</div><div class="line">        var now = new Date(),</div><div class="line">            y = now.getFullYear(),</div><div class="line">            m = now.getMonth() + 1, //！JavaScript中月分是从0开始的</div><div class="line">            d = now.getDate(),</div><div class="line">            h = now.getHours(),</div><div class="line">            min = now.getMinutes(),</div><div class="line">            s = now.getSeconds(),</div><div class="line">            time = y + &apos;/&apos; + m + &apos;/&apos; + d + &apos; &apos; + h + &apos;:&apos; + min + &apos;:&apos; + s;</div><div class="line">        console.log(time + &apos; My App: &apos; + message);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">$.log(&apos;initializing...&apos;); //调用</div></pre></td></tr></table></figure>
<p>但这种方式无法利用jQuery强大的选择器带来的便利，要处理DOM元素以及将插件更好地运用于所选择的元素身上，还是需要使用第二种开发方式。你所见到或使用的插件也大多是通过此种方式开发。</p>
<p>#插件开发<br>　　下面我们就来看第二种方式的jQuery插件开发。</p>
<p>#基本方法<br>　　先看一下它的基本格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	$.fn.pluginName = function() &#123;</div><div class="line">    //your code goes here</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>基本上就是往$.fn上面添加一个方法，名字是我们的插件名称。然后我们的插件代码在这个方法里面展开。<br>比如我们将页面上所有链接颜色转成红色，则可以这样写这个插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$.fn.myPlugin = function() &#123;</div><div class="line">//在这里面,this指的是用jQuery选中的元素</div><div class="line">//example :$(&apos;a&apos;),则this=$(&apos;a&apos;)</div><div class="line">this.css(&apos;color&apos;, &apos;red&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在插件名字定义的这个函数内部，this指代的是我们在调用该插件时，用jQuery选择器选中的元素，一般是一个jQuery类型的集合。比如$(‘a’)返回的是页面上所有a标签的集合，且这个集合已经是jQuery包装类型了，也就是说，在对其进行操作的时候可以直接调用jQuery的其他方法而不需要再用美元符号来包装一下。<br>　　所以在上面插件代码中，我们在this身上调用jQuery的css()方法，也就相当于在调用 $(‘a’).css()。<br>　　理解this在这个地方的含义很重要。这样你才知道为什么可以直接商用jQuery方法同时在其他地方this指代不同时我们又需要用jQuery重新包装才能调用，下面会讲到。初学容易被this的值整晕，但理解了就不难。<br>　　现在就可以去页面试试我们的代码了，在页面上放几个链接，调用插件后链接字体变成红色。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">	&lt;ul&gt;</div><div class="line">	&lt;li&gt;</div><div class="line">		&lt;a href=&quot;http://www.webo.com/liuwayong&quot;&gt;我的微博&lt;/a&gt;</div><div class="line">	&lt;/li&gt;</div><div class="line">	&lt;li&gt;</div><div class="line">		&lt;a href=&quot;http://http://www.cnblogs.com/Wayou/&quot;&gt;我的博客&lt;/a&gt;</div><div class="line">	&lt;/li&gt;</div><div class="line">	&lt;li&gt;</div><div class="line">		&lt;a href=&quot;http://wayouliu.duapp.com/&quot;&gt;我的小站&lt;/a&gt;</div><div class="line">	&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;p&gt;这是p标签不是a标签，我不会受影响&lt;/p&gt;</div><div class="line">&lt;script src=&quot;jquery-1.11.0.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;jquery.myplugin.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	$(function()&#123;</div><div class="line">		$(&apos;a&apos;).myPlugin();</div><div class="line">	&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="http://mmbiz.qpic.cn/mmbiz/0tIK8YmulicOta2wp3rSyCvp4Ug56cWpbOeicaDPyFyTdVoBKSd0DbIUeKQMXDmTwnJIjWAe1Zr7XDn1uKJKtg0g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="原图 by zeng"><br>面进一步，在插件代码里处理每个具体的元素，而不是对一个集合进行处理，这样我们就可以针对每个元素进行相应操作。<br>　　我们已经知道this指代jQuery选择器返回的集合，那么通过调用jQuery的.each()方法就可以处理合集中的每个元素了，但此刻要注意的是，在each方法内部，this指带的是普通的DOM元素了，如果需要调用jQuery的方法那就需要用$来重新包装一下。<br>　　比如现在我们要在每个链接显示链接的真实地址，首先通过each遍历所有a标签，然后获取href属性的值再加到链接文本后面。<br>　　更改后我们的插件代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.fn.myPlugin = function() &#123;</div><div class="line">//在这里面,this指的是用jQuery选中的元素</div><div class="line">this.css(&apos;color&apos;, &apos;red&apos;);</div><div class="line">this.each(function() &#123;</div><div class="line">    //对每个元素进行操作</div><div class="line">    $(this).append(&apos; &apos; + $(this).attr(&apos;href&apos;));</div><div class="line">&#125;))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面开始jQuery插件编写中一个重要的部分，参数的接收。<br>　支持链式调用<br>　　我们都知道jQuery一个时常优雅的特性是支持链式调用，选择好DOM元素后可以不断地调用其他方法。<br>　　要让插件不打破这种链式调用，只需return一下即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.fn.myPlugin = function() &#123;</div><div class="line">    //在这里面,this指的是用jQuery选中的元素</div><div class="line">    this.css(&apos;color&apos;, &apos;red&apos;);</div><div class="line">    return this.each(function() &#123;</div><div class="line">        //对每个元素进行操作</div><div class="line">        $(this).append(&apos; &apos; + $(this).attr(&apos;href&apos;));</div><div class="line">    &#125;))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>让插件接收参数<br>　　一个强劲的插件是可以让使用者随意定制的，这要求我们提供在编写插件时就要考虑得全面些，尽量提供合适的参数。<br>　　比如现在我们不想让链接只变成红色，我们让插件的使用者自己定义显示什么颜色，要做到这一点很方便，只需要使用者在调用的时候传入一个参数即可。同时我们在插件的代码里面接收。另一方面，为了灵活，使用者可以不传递参数，插件里面会给出参数的默认值。<br>　　在处理插件参数的接收上，通常使用jQuery的extend方法，上面也提到过，但那是给extend方法传递单个对象的情况下，这个对象会合并到jQuery身上，所以我们就可以在jQuery身上调用新合并对象里包含的方法了，像上面的例子。当给extend方法传递一个以上的参数时，它会将所有参数对象合并到第一个里。同时，如果对象中有同名属性时，合并的时候后面的会覆盖前面的。<br>　　利用这一点，我们可以在插件里定义一个保存插件参数默认值的对象，同时将接收来的参数对象合并到默认对象上，最后就实现了用户指定了值的参数使用指定的值，未指定的参数使用插件默认值。<br>　　为了演示方便，再指定一个参数fontSize，允许调用插件的时候设置字体大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$.fn.myPlugin = function(options) &#123;</div><div class="line">var defaults = &#123;</div><div class="line">    &apos;color&apos;: &apos;red&apos;,</div><div class="line">    &apos;fontSize&apos;: &apos;12px&apos;</div><div class="line">&#125;;</div><div class="line">var settings = $.extend(defaults, options);</div><div class="line">return this.css(&#123;</div><div class="line">    &apos;color&apos;: settings.color,</div><div class="line">    &apos;fontSize&apos;: settings.fontSize</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，我们调用的时候指定颜色，字体大小未指定，会运用插件里的默认值12px。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&apos;a&apos;).myPlugin(&#123;</div><div class="line">&apos;color&apos;: &apos;#2C9929&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>同时指定颜色与字体大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(&apos;a&apos;).myPlugin(&#123;</div><div class="line">    &apos;color&apos;: &apos;#2C9929&apos;,</div><div class="line">    &apos;fontSize&apos;: &apos;20px&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>保护好默认参数<br>　　注意到上面代码调用extend时会将defaults的值改变，这样不好，因为它作为插件因有的一些东西应该维持原样，另外就是如果你在后续代码中还要使用这些默认值的话，当你再次访问它时它已经被用户传进来的参数更改了。<br><img src="http://mmbiz.qpic.cn/mmbiz/0tIK8YmulicOta2wp3rSyCvp4Ug56cWpbHeZNgDoYb1BtiaPiaMiagvbl2QBNHdZn8sy3hvqf8mXicjz377KVdaT9Mg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="原图 by zeng"></p>
<p>一个好的做法是将一个新的空对象做为$.extend的第一个参数，defaults和用户传递的参数对象紧随其后，这样做的好处是所有值被合并到这个空对象上，保护了插件里面的默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$.fn.myPlugin = function(options) &#123;</div><div class="line">    var defaults = &#123;</div><div class="line">        &apos;color&apos;: &apos;red&apos;,</div><div class="line">        &apos;fontSize&apos;: &apos;12px&apos;</div><div class="line">    &#125;;</div><div class="line">    var settings = $.extend(&#123;&#125;,defaults, options);//将一个空对象做为第一个参数</div><div class="line">    return this.css(&#123;</div><div class="line">        &apos;color&apos;: settings.color,</div><div class="line">        &apos;fontSize&apos;: settings.fontSize</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　到此，插件可以接收和处理参数后，就可以编写出更健壮而灵活的插件了。若要编写一个复杂的插件，代码量会很大，如何组织代码就成了一个需要面临的问题，没有一个好的方式来组织这些代码，整体感觉会杂乱无章，同时也不好维护，所以将插件的所有方法属性包装到一个对象上，用面向对象的思维来进行开发，无疑会使工作轻松很多。<br>面向对象的插件开发<br>　　为什么要有面向对象的思维，因为如果不这样，你可能需要一个方法的时候就去定义一个function，当需要另外一个方法的时候，再去随便定义一个function，同样，需要一个变量的时候，毫无规则地定义一些散落在代码各处的变量。<br>　　还是老问题，不方便维护，也不够清晰。当然，这些问题在代码规模较小时是体现不出来的。<br>　　如果将需要的重要变量定义到对象的属性上，函数变成对象的方法，当我们需要的时候通过对象来获取，一来方便管理，二来不会影响外部命名空间，因为所有这些变量名还有方法名都是在对象内部。<br>　　接着上面的例子，我们可以把这个插件抽象成一个美化页面的对象，因为他的功能是设置颜色啊字体啊什么的，当然我们还可以加入其他功能比如设置下划线啊什么的。当然对于这个例子抽象成对象有点小题大做，这里仅作演示用。以后我可能会介绍我编写的一个jQuery插件SlipHover,其中代码就比较多，这样的模式就用得上了。<br>　　所以我们新建一个对象命名为Beautifier，然后我们在插件里使用这个对象来编码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">	//定义Beautifier的构造函数</div><div class="line">var Beautifier = function(ele, opt) &#123;</div><div class="line">    this.$element = ele,</div><div class="line">    this.defaults = &#123;</div><div class="line">        &apos;color&apos;: &apos;red&apos;,</div><div class="line">        &apos;fontSize&apos;: &apos;12px&apos;,</div><div class="line">        &apos;textDecoration&apos;:&apos;none&apos;</div><div class="line">    &#125;,</div><div class="line">    this.options = $.extend(&#123;&#125;, this.defaults, opt)</div><div class="line">&#125;</div><div class="line">//定义Beautifier的方法</div><div class="line">Beautifier.prototype = &#123;</div><div class="line">    beautify: function() &#123;</div><div class="line">        return this.$element.css(&#123;</div><div class="line">            &apos;color&apos;: this.options.color,</div><div class="line">            &apos;fontSize&apos;: this.options.fontSize,</div><div class="line">            &apos;textDecoration&apos;: this.options.textDecoration</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//在插件中使用Beautifier对象</div><div class="line">$.fn.myPlugin = function(options) &#123;</div><div class="line">    //创建Beautifier的实体</div><div class="line">    var beautifier = new Beautifier(this, options);</div><div class="line">    //调用其方法</div><div class="line">    return beautifier.beautify();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过上面这样一改造，我们的代码变得更面向对象了，也更好维护和理解，以后要加新功能新方法，只需向对象添加新变量及方法即可，然后在插件里实例化后即可调用新添加的东西。<br>　　插件的调用还是一样的，我们对代码的改动并不影响插件其他地方，只是将代码的组织结构改动了而以。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(function() &#123;</div><div class="line">    $(&apos;a&apos;).myPlugin(&#123;</div><div class="line">        &apos;color&apos;: &apos;#2C9929&apos;,</div><div class="line">        &apos;fontSize&apos;: &apos;20px&apos;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>　　指定文字带下划线（我们在Beautifier对象中新加的功能，默认不带下划线，如上面的例子）的调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(function() &#123;</div><div class="line">    $(&apos;a&apos;).myPlugin(&#123;</div><div class="line">        &apos;color&apos;: &apos;#2C9929&apos;,</div><div class="line">        &apos;fontSize&apos;: &apos;20px&apos;,</div><div class="line">        &apos;textDecoration&apos;: &apos;underline&apos;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>到这里，你可以更好地编写复杂的插件同时很好地组织代码了。当我们回头去看上面的代码时，其实也还是有改进空间的。也就是下面介绍的关于命名空间及变量各什么的，一些杂项。<br>　关于命名空间<br>　　不仅仅是jQuery插件的开发，我们在写任何JS代码时都应该注意的一点是不要污染全局命名空间。因为随着你代码的增多，如果有意无意在全局范围内定义一些变量的话，最后很难维护，也容易跟别人写的代码有冲突。<br>　　比如你在代码中向全局window对象添加了一个变量status用于存放状态，同时页面中引用了另一个别人写的库，也向全局添加了这样一个同名变量，最后的结果肯定不是你想要的。所以不到万不得已，一般我们不会将变量定义成全局的。<br>　　一个好的做法是始终用自调用匿名函数包裹你的代码，这样就可以完全放心，安全地将它用于任何地方了，绝对没有冲突。<br>　　用自调用匿名函数包裹你的代码<br>　　我们知道JavaScript中无法用花括号方便地创建作用域，但函数却可以形成一个作用域，域内的代码是无法被外界访问的。如果我们将自己的代码放入一个函数中，那么就不会污染全局命名空间，同时不会和别的代码冲突。<br>　　如上面我们定义了一个Beautifier全局变量，它会被附到全局的window对象上，为了防止这种事情发生，你或许会说，把所有代码放到jQuery的插件定义代码里面去啊，也就是放到$.fn.myPlugin里面。这样做倒也是种选择。但会让我们实际跟插件定义有关的代码变得臃肿，而在$.fn.myPlugin里面我们其实应该更专注于插件的调用，以及如何与jQuery互动。<br>　　所以保持原来的代码不变，我们将所有代码用自调用匿名函数包裹。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">(function() &#123;</div><div class="line">    //定义Beautifier的构造函数</div><div class="line">    var Beautifier = function(ele, opt) &#123;</div><div class="line">        this.$element = ele,</div><div class="line">        this.defaults = &#123;</div><div class="line">            &apos;color&apos;: &apos;red&apos;,</div><div class="line">            &apos;fontSize&apos;: &apos;12px&apos;,</div><div class="line">            &apos;textDecoration&apos;: &apos;none&apos;</div><div class="line">        &#125;,</div><div class="line">        this.options = $.extend(&#123;&#125;, this.defaults, opt)</div><div class="line">    &#125;</div><div class="line">    //定义Beautifier的方法</div><div class="line">    Beautifier.prototype = &#123;</div><div class="line">        beautify: function() &#123;</div><div class="line">            return this.$element.css(&#123;</div><div class="line">                &apos;color&apos;: this.options.color,</div><div class="line">                &apos;fontSize&apos;: this.options.fontSize,</div><div class="line">                &apos;textDecoration&apos;: this.options.textDecoration</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //在插件中使用Beautifier对象</div><div class="line">    $.fn.myPlugin = function(options) &#123;</div><div class="line">        //创建Beautifier的实体</div><div class="line">        var beautifier = new Beautifier(this, options);</div><div class="line">        //调用其方法</div><div class="line">        return beautifier.beautify();</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>　　这样做的好处，也就是上面所阐述的那样。另外还有一个好处就是，自调用匿名函数里面的代码会在第一时间执行，页面准备好过后，上面的代码就将插件准备好了，以方便在后面的代码中使用插件。<br>　　目前为止似乎接近完美了。如果再考虑到其他一些因素，比如我们将这段代码放到页面后，前面别人写的代码没有用分号结尾，或者前面的代码将window, undefined等这些系统变量或者关键字修改掉了，正好我们又在自己的代码里面进行了使用，那结果也是不可预测的，这不是<br>我们想要的。我知道其实你还没太明白，下面详细介绍。<br>　　将系统变量以变量形式传递到插件内部<br>　　来看下面的代码，你猜他会出现什么结果？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var foo=function()&#123;</div><div class="line">    //别人的代码</div><div class="line">&#125;//注意这里没有用分号结尾</div><div class="line"></div><div class="line">//开始我们的代码。。。</div><div class="line">(function()&#123;</div><div class="line">    //我们的代码。。</div><div class="line">    alert(&apos;Hello!&apos;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>　　本来别人的代码也正常工作，只是最后定义的那个函数没有用分号结尾而以，然后当页面中引入我们的插件时，报错了，我们的代码无法正常执行。<br><img src="http://mmbiz.qpic.cn/mmbiz/0tIK8YmulicOta2wp3rSyCvp4Ug56cWpbqfUxTxpqQ6vFicshWnHibibffQGFPjppYnh5vETMYVvhfpoEgKXGia9ggQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="原图 by zeng"><br>原因是我们用来充当自调用匿名函数的第一对括号与上面别人定义的函数相连，因为中间没有分号嘛，总之我们的代码无法正常解析了，所以报错。<br>　　所以好的做法是我们在代码开头加一个分号，这在任何时候都是一个好的习惯。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var foo=function()&#123;</div><div class="line">    //别人的代码</div><div class="line">&#125;//注意这里没有用分号结尾</div><div class="line"></div><div class="line">//开始我们的代码。。。</div><div class="line">;(function()&#123;</div><div class="line">    //我们的代码。。</div><div class="line">    alert(&apos;Hello!&apos;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>同时，将系统变量以参数形式传递到插件内部也是个不错的实践。<br>　　当我们这样做之后，window等系统变量在插件内部就有了一个局部的引用，可以提高访问速度，会有些许性能的提升<br>　　最后我们得到一个非常安全结构良好的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">;(function($,window,document,undefined)&#123;</div><div class="line">    //我们的代码。。</div><div class="line">    //blah blah blah...</div><div class="line">&#125;)(jQuery,window,document);</div></pre></td></tr></table></figure></p>
<p>　　而至于这个undefined，稍微有意思一点，为了得到没有被修改的undefined，我们并没有传递这个参数，但却在接收时接收了它，因为实际并没有传，所以‘undefined’那个位置接收到的就是真实的’undefined’了。是不是有点hack的味道，值得细细体会的技术，当然不是我发明的，都是从前人的经验中学习。<br>　　所以最后我们的插件成了这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">;(function($, window, document,undefined) &#123;</div><div class="line">    //定义Beautifier的构造函数</div><div class="line">    var Beautifier = function(ele, opt) &#123;</div><div class="line">        this.$element = ele,</div><div class="line">        this.defaults = &#123;</div><div class="line">            &apos;color&apos;: &apos;red&apos;,</div><div class="line">            &apos;fontSize&apos;: &apos;12px&apos;,</div><div class="line">            &apos;textDecoration&apos;: &apos;none&apos;</div><div class="line">        &#125;,</div><div class="line">        this.options = $.extend(&#123;&#125;, this.defaults, opt)</div><div class="line">    &#125;</div><div class="line">    //定义Beautifier的方法</div><div class="line">    Beautifier.prototype = &#123;</div><div class="line">        beautify: function() &#123;</div><div class="line">            return this.$element.css(&#123;</div><div class="line">                &apos;color&apos;: this.options.color,</div><div class="line">                &apos;fontSize&apos;: this.options.fontSize,</div><div class="line">                &apos;textDecoration&apos;: this.options.textDecoration</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //在插件中使用Beautifier对象</div><div class="line">    $.fn.myPlugin = function(options) &#123;</div><div class="line">        //创建Beautifier的实体</div><div class="line">        var beautifier = new Beautifier(this, options);</div><div class="line">        //调用其方法</div><div class="line">        return beautifier.beautify();</div><div class="line">    &#125;</div><div class="line">&#125;)(jQuery, window, document);</div></pre></td></tr></table></figure></p>
<p>　　一个安全，结构良好，组织有序的插件编写完成。<br>关于变量定义及命名<br>　　现在谈谈关于变量及方法等的命名，没有硬性规定，但为了规范，遵循一些约定还是很有必要的。<br>　　变量定义：好的做法是把将要使用的变量名用一个var关键字一并定义在代码开头，变量名间用逗号隔开。原因有二：<br>一是便于理解，知道下面的代码会用到哪些变量，同时代码显得整洁且有规律，也方便管理，变量定义与逻辑代码分开；<br>二是因为JavaScript中所有变量及函数名会自动提升，也称之为JavaScript的Hoist特性，即使你将变量的定义穿插在逻辑代码中，在代码解析运行期间，这些变量的声明还是被提升到了当前作用域最顶端的，所以我们将变量定义在一个作用域的开头是更符合逻辑的一种做法。当然，再次说明这只是一种约定，不是必需的。<br>　　变量及函数命名 一般使用驼峰命名法（CamelCase），即首个单词的首字母小写，后面单词首字母大写，比如resultArray，requestAnimationFrame。对于常量，所有字母采用大写，多个单词用下划线隔开，比如WIDTH=100，BRUSH_COLOR=’#00ff00’。当变量是jQuery类型时，建议以$开头，开始会不习惯，但经常用了之后会感觉很方便，因为可以很方便地将它与普通变量区别开来，一看到以$开头我们就知道它是jQuery类型可以直接在其身上调用jQuery相关的方法，比如var<br>$element=$(‘a’); 之后就可以在后面的代码中很方便地使用它，并且与其他变量容易区分开来。<br>　　引号的使用：既然都扯了这些与插件主题无关的了，这里再多说一句，一般HTML代码里面使用双引号，而在JavaScript中多用单引号，比如下面代码所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var name = &apos;Wayou&apos;;</div><div class="line">document.getElementById(‘example’).innerHTML = &apos;&lt; a href=&quot;http: //wayouliu.duapp.com/&quot;&gt;&apos;+name+&apos;&lt;/a&gt;&apos;; //href=&quot;..&quot; HTML中保持双引号，JavaScript中保持单引号</div></pre></td></tr></table></figure></p>
<p>　　一方面，HTML代码中本来就使用的是双引号，另一方面，在JavaScript中引号中还需要引号的时候，要求我们单双引号间隔着写才是合法的语句，除非你使用转意符那也是可以的。再者，坚持这样的统一可以保持代码风格的一致，不会出现这里字符串用双引号包着，另外的地方就在用单引号。</p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jquery发展10年，已经是一个非常优秀且成熟的js框架，在平常的开发过程中给了开发者非常多的便利，特别是dom的操作。&lt;br&gt;随着项目的发展，代码复用性更强是一个优秀开发者追求的方向。&lt;br&gt;根据《jQuery高级编程》的描述，jQuery插件开发方式主要有三种：&lt;br&gt;通过$.extend()来扩展jQuery&lt;br&gt;通过$.fn 向jQuery添加新的方法&lt;br&gt;通过$.widget()应用jQuery UI的部件工厂方式创建&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>HTML5手势检测和原理</title>
    <link href="http://yoursite.com/2016/08/18/about-touch/"/>
    <id>http://yoursite.com/2016/08/18/about-touch/</id>
    <published>2016-08-18T02:24:00.000Z</published>
    <updated>2016-08-18T02:40:04.395Z</updated>
    
    <content type="html"><![CDATA[<p>先了解下手势<br>常用的 HTML5 手势可以分为两类，单点手势和两点手势。单点手势有 tap(单击)，double tap(双击)，long tap(长按)，swipe(挥)，move(移动)。两点手势有 pinch(缩放)，rotate(旋转)。 接下来我们实现一个检测这些手势的 js 库，并利用这个手势库做出炫酷的交互效果。<br><img src="http://7xrvqo.com1.z0.glb.clouddn.com/images/gesture_detection_in_html5/2362670-f0092d3a3c5569e0.8a78c884.gif" alt="原图 by qianduan"><br><a id="more"></a></p>
<p>#单击(tap)<br>手势检测的关键是用 touchstart，touchmove，touchend 三个事件对手势进行分解。那么怎么分解单击事件呢？</p>
<p>1 在 touchstart 发生时进入单击检测，只有一个接触点。因为单击事件限制为一个手指的动作。<br>2 没有发生 touchmove 事件或者 touchmove 在一个很小的范围(如下图)。限制 touchmove 在一个很小范围，是为了给用户一定的冗余空间，因为不能保证用户手指在接触屏幕的时候不发生轻微的位移。<br><img src="http://7xrvqo.com1.z0.glb.clouddn.com/images/gesture_detection_in_html5/2362670-6c2122444bc9931e.28abbd66.png" alt="原图 by qianduan"></p>
<p>3 touchend 发生在 touchstart后的很短时间内(如下图)。这个时间段的阈值是毫秒级，用来限制手指和屏幕接触的时间。因为单击事件从开始到结束是很快的。<br><img src="http://7xrvqo.com1.z0.glb.clouddn.com/images/gesture_detection_in_html5/2362670-1f1576fa5e6de996.e580b0a5.png" alt="原图 by qianduan"><br>有了上面的流程，就可以开始实现 tap 事件监测了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">	_getTime() &#123;</div><div class="line">  return new Date().getTime();</div><div class="line">&#125;</div><div class="line">_onTouchStart(e) &#123;</div><div class="line">    //记录touch开始的位置</div><div class="line">    this.startX = e.touches[0].pageX;</div><div class="line">    this.startY = e.touches[0].pageY;</div><div class="line">    if(e.touches.length &gt; 1) &#123;</div><div class="line">      //多点监测</div><div class="line">      ...</div><div class="line">    &#125;else &#123;</div><div class="line">      //记录touch开始的时间</div><div class="line">      this.startTime = this._getTime();</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line">_onTouchMove(e) &#123;</div><div class="line">  ...</div><div class="line">  //记录手指移动的位置</div><div class="line">  this.moveX = e.touches[0].pageX;</div><div class="line">  this.moveY = e.touches[0].pageY;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">_onTouchEnd(e) &#123;</div><div class="line">  let timestamp = this._getTime();</div><div class="line">  if(this.moveX !== null &amp;&amp; Math.abs(this.moveX - this.startX) &gt; 10 ||</div><div class="line">    this.moveY !== null &amp;&amp; Math.abs(this.moveY - this.startY) &gt; 10) &#123;</div><div class="line">      ...</div><div class="line">  &#125;else &#123;</div><div class="line">    //手指移动的位移要小于10像素并且手指和屏幕的接触时间要短语500毫秒</div><div class="line">    if(timestamp - this.startTime &lt; 500) &#123;</div><div class="line">      this._emitEvent(&apos;onTap&apos;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>#双击(double tap)<br>和单击一样，双击事件也需要我们对手势进行量化分解。 1. 双击事件是一个手指的行为。所以在 touchstart 时，我们要判断此时屏幕有几个接触点。 2. 双击事件中包含两次独立的单击行为。理想情况下，这两次点击应该落在屏幕上的同一个点上。为了给用户一定的冗余空间，将两次点击的坐标点距离限制在10个像素以内。<br><img src="http://7xrvqo.com1.z0.glb.clouddn.com/images/gesture_detection_in_html5/2362670-b9ba91dcca76bc46.4e3e4ca4.png" alt="原图 by qianduan"><br>3 双击事件本质是两次快速的单击。也即是说，两次点击的间隔时间很短。通过一定的测试量化后，我们把两次单击的时间间隔设为300毫秒。<br><img src="http://7xrvqo.com1.z0.glb.clouddn.com/images/gesture_detection_in_html5/2362670-df88e119b4efa2e8.556310d3.png" alt="原图 by qianduan"><br><strong> 注意双击事件中我们检测了相邻两个 touchstart 事件的位移和时间间隔 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">	_onTouchStart(e) &#123;</div><div class="line">  if(e.touches.length &gt; 1) &#123;</div><div class="line">  ...</div><div class="line">  &#125; else &#123;</div><div class="line">    if(this.previousTouchPoint) &#123;</div><div class="line">      //两次相邻的touchstart之间距离要小于10，同时时间间隔小于300ms</div><div class="line">      if( Math.abs(this.startX -this.previousTouchPoint.startX) &lt; 10  &amp;&amp;</div><div class="line">          Math.abs(this.startY - this.previousTouchPoint.startY) &lt; 10 &amp;&amp;</div><div class="line">          Math.abs(this.startTime - this.previousTouchTime) &lt; 300) &#123;</div><div class="line">            this._emitEvent(&apos;onDoubleTap&apos;);</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">    //保存上一次touchstart的时间和位置信息</div><div class="line">    this.previousTouchTime = this.startTime;</div><div class="line">    this.previousTouchPoint = &#123;</div><div class="line">        startX : this.startX,</div><div class="line">        startY : this.startY</div><div class="line">     &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>#长按(long press)<br>长按应该是最容易分解的手势。我们可以这样分解：在 touchstart 发生后的很长一段时间内，如果没有发生 touchmove 或者 touchend 事件，那么就触发长按手势。</p>
<p>长按是一个手指的行为，需要检测屏幕上是否只有一个接触点。<br>如果手指在空间上发生了移动，那么长按事件取消。<br>如果手指在屏幕上停留的时间超过800ms，那么触发长按手势。<br>如果手指在屏幕上停留的时间小于800ms，也即 touchend 在 touchstart 发生后的800ms内触发，那么长按事件取消。<br><img src="http://7xrvqo.com1.z0.glb.clouddn.com/images/gesture_detection_in_html5/2362670-78b28545c20ed15f.45c5424e.png" alt="原图 by qianduan"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">_onTouchStart(e) &#123;</div><div class="line">  clearTimeout(this.longPressTimeout);</div><div class="line">  if(e.touches.length &gt; 1) &#123;</div><div class="line">  &#125;else &#123;</div><div class="line">    this.longPressTimeout = setTimeout(()=&gt;&#123;</div><div class="line">      this._emitEvent(&apos;onLongPress&apos;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">_onTouchMove(e) &#123;</div><div class="line">  ...</div><div class="line">  clearTimeout(this.longPressTimeout);</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">_onTouchEnd(e) &#123;</div><div class="line">  ...</div><div class="line">  clearTimeout(this.longPressTimeout);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>#缩放(pinch)<br>缩放是一个非常有趣的手势，还记得第一代iPhone双指缩放图片给你带来的震撼吗？虽然如此，缩放手势的检测却相对简单。</p>
<p>缩放是两个手指的行为，需要检测屏幕上是否有两个接触点。<br>缩放比例的量化，是通过两次缩放行为之间的距离的比值得到，如下图。<br><img src="http://7xrvqo.com1.z0.glb.clouddn.com/images/gesture_detection_in_html5/2362670-cecc52209ff03392.8f08400b.png" alt="原图 by qianduan"><br><strong> 所以缩放的核心是获取两个接触点之间的直线距离。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">_onTouchStart(e) &#123;</div><div class="line">  if(e.touches.length &gt; 1) &#123;</div><div class="line">    let point1 = e.touches[0];</div><div class="line">    let point2 = e.touches[1];</div><div class="line">    let xLen = Math.abs(point2.pageX - point1.pageX);</div><div class="line">    let yLen = Math.abs(point2.pageY - point1.pageY);</div><div class="line">    this.touchDistance = this._getDistance(xLen, yLen);</div><div class="line">  &#125; else &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在_onTouchStart函数中获取并且保存 touchstart 发生时两个接触点之间的距离。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">_onTouchMove(e) &#123;</div><div class="line">  if(e.touches.length &gt; 1) &#123;</div><div class="line">      let xLen = Math.abs(e.touches[0].pageX - e.touches[1].pageX);</div><div class="line">      let yLen = Math.abs(e.touches[1].pageY - e.touches[1].pageY);</div><div class="line">      let touchDistance = this._getDistance(xLen,yLen);</div><div class="line">      if(this.touchDistance) &#123;</div><div class="line">        let pinchScale = touchDistance / this.touchDistance;</div><div class="line">          this._emitEvent(&apos;onPinch&apos;,&#123;scale:pinchScale - this.previousPinchScale&#125;);</div><div class="line">          this.previousPinchScale = pinchScale;</div><div class="line">      &#125;</div><div class="line">  &#125;else &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>#旋转(rotate)<br>旋转手势需要检测两个比较重要的值，一是旋转的角度，二是旋转的方向(顺时针或逆时针)。 其中旋转角度和方向的计算需要通过向量的计算来获取，本文不再展开，感兴趣的同学可以查看这里。<br><img src="http://7xrvqo.com1.z0.glb.clouddn.com/images/gesture_detection_in_html5/2362670-67c864158c19a169.671c66c2.png" alt="原图 by qianduan"><br>首先，需要获取向量的旋转方向和角度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	//这两个方法属于向量计算，具体原理请阅读本文最后的参考文献</div><div class="line">_getRotateDirection(vector1,vector2) &#123;</div><div class="line">  return vector1.x * vector2.y - vector2.x * vector1.y;</div><div class="line">&#125;  </div><div class="line">_getRotateAngle(vector1,vector2) &#123;</div><div class="line">  let direction = this._getRotateDirection(vector1,vector2);</div><div class="line">  direction = direction &gt; 0 ? -1 : 1;</div><div class="line">  let len1 = this._getDistance(vector1.x,vector1.y);</div><div class="line">  let len2 = this._getDistance(vector2.x,vector2.y);</div><div class="line">  let mr = len1 * len2;</div><div class="line">  if(mr === 0) return 0;</div><div class="line">  let dot = vector1.x * vector2.x + vector1.y * vector2.y;</div><div class="line">  let r = dot / mr;</div><div class="line">  if(r &gt; 1) r = 1;</div><div class="line">  if(r &lt; -1) r = -1;</div><div class="line">  return Math.acos(r) * direction * 180 / Math.PI;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，我们在手指发生移动时，调用获取旋转方向和角度的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">_onTouchStart(e) &#123;</div><div class="line">  ...  </div><div class="line">  if(e.touches.length &gt; 1) &#123;</div><div class="line">    this.touchVector = &#123;</div><div class="line">       x: point2.pageX - this.startX,</div><div class="line">       y: point2.pageY - this.startY</div><div class="line">     &#125;;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">_onTouchMove(e) &#123;</div><div class="line">  ...</div><div class="line">  if(this.touchVector) &#123;</div><div class="line">        let vector = &#123;</div><div class="line">          x: e.touches[1].pageX - e.touches[0].pageX,</div><div class="line">          y: e.touches[1].pageY - e.touches[0].pageY</div><div class="line">        &#125;;</div><div class="line">        let angle = this._getRotateAngle(vector,this.touchVector);</div><div class="line">        this._emitEvent(&apos;onRotate&apos;,&#123;</div><div class="line">          angle</div><div class="line">        &#125;);</div><div class="line">        this.touchVector.x = vector.x;</div><div class="line">        this.touchVector.y = vector.y;</div><div class="line">      &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a href="https://github.com/eeandrew/gestures" title="github" target="_blank" rel="external">源码</a>
<a href="http://eeandrew.github.io/demos/gestures/index.html" title="demo" target="_blank" rel="external">在线demo</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先了解下手势&lt;br&gt;常用的 HTML5 手势可以分为两类，单点手势和两点手势。单点手势有 tap(单击)，double tap(双击)，long tap(长按)，swipe(挥)，move(移动)。两点手势有 pinch(缩放)，rotate(旋转)。 接下来我们实现一个检测这些手势的 js 库，并利用这个手势库做出炫酷的交互效果。&lt;br&gt;&lt;img src=&quot;http://7xrvqo.com1.z0.glb.clouddn.com/images/gesture_detection_in_html5/2362670-f0092d3a3c5569e0.8a78c884.gif&quot; alt=&quot;原图 by qianduan&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="mobile" scheme="http://yoursite.com/tags/mobile/"/>
    
  </entry>
  
  <entry>
    <title>101种让你网站更棒的方法</title>
    <link href="http://yoursite.com/2016/08/17/about-web/"/>
    <id>http://yoursite.com/2016/08/17/about-web/</id>
    <published>2016-08-17T05:24:00.000Z</published>
    <updated>2016-08-17T06:12:07.948Z</updated>
    
    <content type="html"><![CDATA[<p>本文章最初出版于AwesomeBlog。<br><img src="http://mmbiz.qpic.cn/mmbiz_jpg/0tIK8YmulicPoWEibemYzFY4voAR8ZyaaukZKMF44CgiaUfDkYIr1vYzFKKibC1o3Au3WInN9iarRhibQm4uFhz4Sayg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="原图 by UIchina"><br><a id="more"></a></p>
<p>据说这是一个清单：<br>1.良好的品牌<br>使用专业的logo。大家的网站和博客中很难发现一个设计精美的logo，但其实这是建立好印象的第一步。<br>上传高分辨率适配（retina-ready）的favicon（在你浏览器tab页上的方块图标）。大多数的网站都是使用16x16像素的favicon，然而在高分辨率的屏幕上，他们就模糊了。你可以在X-Icon Editor上生成一个64x64像素的favicon。<br>多使用高分辨率图像。至少要保证图片是它容器的二倍大，然后再缩小显示它。<br>最多使用2-3种颜色。其中一个背景色，一个活动色，一个强调色。<br>选择颜色的时候，首选互补色或三原色（complementary or triad<br>colors），然后进行调整，好的颜色组合会让你拥有带着故事感的设计。<br>拒绝纯黑色（#000）。纯净的黑色是不存在的，所以黑色用着看起来总是不太对的样子。实际黑色大部分都被用在作为其他颜色的阴影区域。<br>拒绝中性灰（e.g. #ccc）[然而我经常用，囧-<br>-]。如果你希望你的设计有某些特质，可以用浅黄色增加温暖，红色提供能量，还有蓝色来制造信任。</p>
<p>2.绝佳的排版<br>挑选一款优质字体。一个网页中95%都是字。使用一款优质字体是改善印象最便捷的方式。<br>使用最多2-3种字体。太多种字体会显得杂乱而且降低了加载速度。选择一种标题字体和段落字体，再有就是特殊例子的字体。<br>设置网页body字体大小为16px。在大显示器上难以阅读比这小的字号。移动设备的字号则缩为12px。<br>选择一种排版缩放比例，根据缩放比例来设置段落，H4，H3，H2，H1的字体大小。根据这个缩放比例来设置你的行高和文本距离。<br>设计其他排版元素，例如引用、无序列表、有序列表、标题、帮助提示、通知、高亮文字、代码例子、缩略语以及地址。<br>安装一款定制图标字体，例如 Font Awesome。用它代替图片来做一些社交媒体、导航按钮和交互图形的图标。图标字体加载更快，随意缩放，并且可以自由的更改颜色。</p>
<p>3.出色的布局<br>基本布局使用三分法，将你页面横纵各分为三部分，然后根据线段交叉来排列关键点。<br>维护一个纵向布局的栅格系统。将你的布局分为8列，12列或者16列。<br>通过基线网格来保持一种垂直的结构。文本行中间的空间其实和内容块中间的空间同等重要。每行文字下都应该有一个基于基线的margin-bottom。<br>留白太奢侈了，它主要是用来创造喘息的空间和维持视觉平衡。应当吸引读者的视线到最重要的地方。<br>平衡虚拟元素例如按钮、输入框、表单、标题等等。你应当大致可以找到一条你希望用户跟随的轨迹。</p>
<p>4.友好的用户接口<br>使用一个放大加粗的活动按钮。每一个页面都有一个goal，通常都是通过点击按钮实现的。所以要确保这个按钮不会被忽略<br>给链接、按钮、输入框和文本域添加hover和active状态。如果你选择在hover状态是使按钮变亮，那么其他元素hover状态也应当保持一致。<br>保持表格样式的一致性。所有的文本域和输入框都应该样式统一，同样的边框颜色，背景色，悬停状态，点击状态，提示语，点击文字等等。设置好tabindex，这样就可以通过按下tab来依次访问这些元素。<br>改变已访问链接的颜色，从而使你的用户知道他们去过这些页面了。<br>一旦你有了自己的logo，色系，排版，布局以及图像尺寸，就应该建立一套风格指南。风格一致的组件才能构建出友好的用户接口。<br>5.完美的用户体验<br>添加微交互给按钮或其他区域。比如一个“上传”按钮被点击之后可以变成“正在上传”或者“处理中”。<br>No scroll jacking!不要改变浏览器的默认行为，你也许觉得鼠标滚轮的速度变为之前的二倍很好，然而你认为的并不是你认为的。<br>去除主页的轮播。这样减少了转换，而且还有其他更好的方式在小的空间里展示更多的信息。<br>不要使用欢迎页。当访客第一次访问你的网站更希望看到你的主页。<br>使用标题，副标题，首段（lead paragraphs），列表和题注来使你的内容更容易浏览。大多数人在认真阅读一个网页前都是先大致浏览它一遍。<br>添加描述性预留文字给所有的表单、输入框和下拉菜单。如果你希望别人可以用某些方式来填充一个区域，请告诉他们。例如下拉列表和选择区域，把描述放在第一个选项。“请选择年份”比“2016”好多了。<br>在表单上添加HTML5验证[HTML5 validation]，以便于用户可以更清晰的意识到自己在尝试提交存在错误的表单。<br>通过避免模糊的链接名，减少混乱的东西，使用标点符号，保持简洁的布局，给图片加入alt说明，使用大号文字，并且保证文字颜色和背景色的高对比度，来让你的站点对于视觉缺陷者来说是可访问的。<br>用BrokenLinkCheck.com来检查你网站的失效的链接。为了防止人们点击失效链接时陷入癫狂还是快修复了吧233。<br>极致的开发<br>确保你的网站是移动优化的可以在任何设备上响应式的显示。良好的移动优化网站加载更快，排名更高，并且带给用户更好的体验。<br>生成并且展示最优尺寸的图片。如果你上传了一个很大的图片用来做博客的特征图，同时你想要把这张图展示在侧边栏等位置，那么你就应该确保展示的是缩小后的图片而不是原图。<br>给每个图片和链接加上标签和标题。如果出于某些原因一个图片没有加载出来，你的网站就可以在这个图片原本的位置来显示它的标签。同样，当你鼠标悬停在一个链接上时，浏览器则会展示这个链接的标题。<br>使用<strong>和<em>代替<b>和<i>来定义加粗和斜体文字。他们的效果是一样的，但是却有本质上的区别。<b>是一种样式，而<strong>则是指出了这个内容的意义。<br>处理掉冗余的HTML。当你复制粘贴内容到一个可视化编辑器（像WordPress的虚拟视图）中是，它加入了很多无用的span和行内样式。这样会让你的网站可读性变的很差。<br>说到这，就要说一下去除内联样式，99%的情况，都应该是使用一个可以更新所有组件实例的CSS文件，而不是一页页一行行的改。<br>使用Sass变量代替CSS来保持网站中颜色和组件的一致性。当想要改变一种颜色和这个颜色的阴影的时候，更新一行就完美实现了。<br>与永久链接链接而不是URL以防你更改域名。例如，当要加入某个链接时，你的HTML应当是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href = &quot;/slug-goes-here&quot;&gt;</div></pre></td></tr></table></figure></strong></b></i></b></em></strong></p>
<p> 而不是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href = &quot;http://domain.com/slug-goes/here&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>图片资源和CSS也是同理。如果你不这样做，当你把网站放到新的域名下的时候，你链接的所有资源文件和页面不存在了。<br>开发自定义插件或者是利用提供特有功能的工具在网站上使用。自定义软件很难维护但是与同类网站相比却能提供很强的竞争力。<br>测试跨浏览器兼容性来确保你的网站可以在Chrome，火狐，Safari，IE等浏览器上都可以正常显示。大家都知道低版本的IE浏览器在展示网站时差的一[哔—]，所以可以使用BrowserStack来手动检测。<br>使用W3C的标记验证服务来发现你HTML中显眼的错误。要知道，大多数网站都都没完美使用正确的HTML。这一条的优先级不是最高的，但是如果在页面中没有任何错误会让你很舒适。<br>建立一个模拟环境来展示最近的修改。理想情况下是有一个成品网站，来给所有人看，并且有一个开发网站，来给开发人员做修改。一旦修改好了可以上线了，在把开发网站推送到成品网站上。<br>在页脚的Copyright中展示当前年份。当你看到一个网站使用过去的Copyright，你就会假想是不是这个页面已经没人维护了。可以使用PHP或者类似的脚本来在静态文字中展示当前年份（e.g. ©<established year=""> — <current year="">）<br>6.非凡的搜索引擎优化<br>选出你希望每个页面依此排序的关键词。根据这个关键词对页面每个部分进行优化，但并不是把这个关键词放到每个句子中，而是灵活表现出你希望它怎么排序。<br>给每个页面设置富关键字的标题元素。在Google的搜索结果中，标题会以55个字符以内的蓝色链接的形式展示。<br>限制每个页面中有且仅有一个H1。大多数情况下，H1的内容应该和标题元素的内容是相同的。<br>使用大量的H2，H3和H4创建副标题来使你页面的内容富有层次感。<br>通过一个被标题，H1，副标题和前1/3内容包含的特定关键字来优化页面。<br>你的meta描述将会在展示在搜索结果中链接下的描述里。确保你每个页面都加入了meta描述并且在描述中包含了关键词<br>URL中，在域名后的固定链接(i.e.<br>domain.com/permalink-here/)，应该包含由破折号分割的关键词。<br>Google的算法中考虑了域名的年龄，因为一个注册了很多年的域名更像一个高品质的来源。提前几年来注册你的域名。一旦你的域名注册了十年了，可以证明你有认真对待你的事业。<br>平均来说，任意关键词SERP(search engine results page搜索引擎结果页)的第一个结果都是一个超过2000字/页的页面。如果想要搭建一个排行好的博客或者页面，试着去保证至少2000个字。<br>惯于使用一个sitemap.xml文件创建网站地图，并将这个文件放在根目录下使其可以在<br>domain.com/sitemap.xml上展示。它将会使Google知道你所有页面的位置并且应当在你加入新内容时自动更新。通过 Webmaster Tools将文件提交到Google。<br>为你的站点添加Google Webmaster Tools，以便于你可以看见站点的Google排名并且如果出现危险情况时维持更新。<br>为了使图片排名提高，记得在网站上传前重命名图片和其他文件(e.g. 根据此关键词提升排名.png)。<br>在网站中包含一个robots.txt文件来告诉web爬虫哪些页面应该索引哪些不应该索引。<br>添加一个典型重定向来使网站中不含www的访问跳转到www版本，反之亦然。<br>重新搜索并且整合每个页面的潜在语义索引(latent semantic<br>indexing)词来帮助提升主关键词的排名。通过搜索你的关键词然后选择相关搜索来寻找你需要的潜在语义索引词。<br>确保内容中互相跳转的链接是可用的。应该保证每个页面最多从首页点击三次就可以访问。<br>在相关的页面添加结构化数据以便于Google可以争取索引你的内容。需要定制结构化数据的页面类型有人物，产品，时间，组织，电影，书，回顾等。可以使用Schema Creator来生成结构化数据。<br>通过Google的PageSpeed Insights来确保你解决了所以常见的影响网页速度的问题。网页加载速越快就会带来排名的相应提升。<br>7.出色的页面速度<br>保持网页小于2MB。使用tools.pingdom.com来检查你的主登录页。无论怎样都不能超过2MB。<br>保持页面请求少于50。每个文件或者图片都会带来一个HTTP请求，请求数量越少，页面加载速度越快。每个页面平均有70个请求，使用GTmetrix来查看具体请求。<br>用CSS代替背景图片来设计页面。绝对不要用一张图片来做按钮，表格或者其他网页中基本组件。CSS加载的更快并且在响应式布局中更加灵活。<br>在网站加载图片之前优化他们。想TinyPNG这种工具可以减小图片文件的大小80%-95%并且保证不失真。<br>建立一个内容分发网络在世界不同的位置分发图片和一些大文件。CDNs可以基于访问者的物理位置来智能的选择当地的服务器以达到最大的加载速度。<br>在上传之前，使用编译和压缩工具来缩小JavaScript，HTML和CSS文件。JavaScript可以使用Closure Compiler。HTML可以使用HTML Minifier。CSS可以使用YUI Compressor。<br>把阻塞渲染的JavaScript移动到footer中。只有一开始就影响页面设计的脚本才应该放到header中（e.g. 定制字体）。<br>避免登录页重定向。重定向会触发一个额外的HTTP请求以致于延迟页面渲染。<br>通过给不经常更新的页面设定有效期限来减少浏览器缓存。浏览器缓存会告知浏览器去加载本地磁盘之前下载好的页面，取代通过网络加载。<br>在服务器配置中允许gzip压缩。压缩可以在第一次渲染页面时减少90%传输应答时间。<br>在服务器设置中允许长连接，这样可以让同一个TCP连接收发多组HTTP请求，因此减少后面请求的延迟。<br>升级成为一个专用服务器或者添加额外服务器来提升服务器响应时间。当你使用一个共享主机环境时，你的网站只是同一个服务器中微不足道的一部分。如果其他的站点的大量开销造成拥堵，将会降低你页面的速度。<br>8.精致的图像设计<br>设计一个自定义的电子书封面。这是一件不复杂却可以带来很大转换率的事情。<br>给主页和售卖页设计一个自定义图解。一个好的图解可以用一个简单的方式让别人认知你的网站，并且留下深刻印象。<br>创建一个或者一系列自定义的博客特征图像。也就是用来在Facebook，Twitter，Pinterest等平台展示。当用户看到与博文相关的某类型图像，他们就知道这个是你写的文章了。<br>展示你和你团队成员个性化的插图和漫画头像。相比较每次新成员加入就雇佣专业的摄影师，个性化的漫画头像则是便宜些的选择。况且，这个一个给新成员的很棒的礼物。<br>使用定制图表相对于使用博客可以更加直观的来展示数据和一些其他内容来获取更多的流量。人们都喜欢在Pinterest这类网站上分享图表或者在他们自己的站点上转发并且带上一个引向你网站的链接。<br>如果你做了一个或一系列视频，你就应当有自定义的片头片尾让其拥有更专业的感觉。并且不提及其他视频的图像和动画将会使你的品牌更加突出。<br>9.周密的Web安全<br>安装一个SSL证书来保证web服务器发起安全连接给浏览器。当你接受信用卡的时候，大多数的校验软件都需要一个SSL证书。Google曾经提及，一个SSL证书可以提升你的搜索排名。<br>保证你的软件和插件的更新。当WordPress和其他CMS软件发布更新的时候，通常都是修补一些漏洞。如果你没有更新，那么你的网站被攻击就只是时间问题了。<br>在管理页面设置双重认证登录入口。大多数的攻击都开始于登录页。<br>检查并移除恶意软件。如果你的网站之前被攻击过，那么他们很可能加入了不容易被发现的感染文件进去。如果你不及时移除它，你的网站就可能被Google拉进黑名单，从而降低排名，并且当用户访问的时候就会收到警告。<br>绝对不要把你的管理员名称设置成“admin”。删除掉默认管理员账户，并且创建一个不同用户名的新账户。<br>定期备份数据库和网站文件。大部分备份软件和插件通常只会备份你数据库中的数据和内容。然而一旦你丢失了你的站点，你就可能需要一个网站文件的备份来恢复它。<br>10.精彩的内容<br>定义个性化的404错误页，它将会在每当用户想要访问不存在的页面时被展示出来。使用404页面来引导他们回到主页或者帮助他们找到他们搜索的地方。<br>除了主页之外，about页面大概是网站中被访问最多的页面了。所以确保它展示了你和你公司良好的形象。<br>联系页面可以帮助人们联系到你，并且还可以起到在你，访客以及Google之间建立信任的作用。当确定要提升你网站排名的时候，机器人就会去你的联系页面来搜索邮箱，电话和地址。联系方式可以让Google觉得这个站点更可信。<br>It’s good to have opt-in forms strategically sprinkled throughout your site, but it’s also smart to have a squeeze page with nothing but a high-converting opt-in. When you want someone to subscribe, link to that<br>page.[求指点]<br>当有人订阅你的列表的时候，你应当给他们发送一个确认页面，让他们确认邮箱信息。不然如果他们没有给出正确的邮箱，那么他有可能会忘记你的站点并且再也不记得这件事。<br>在用户点击了确认链接后，请给他们展示一个感谢页面，并且他们可以知道下一步做什么。每个订阅者都看到这个页面并且只看到一次，所以这是个很好的机会与他们建立交易或者鼓励他们购买。<br>当用户采取某些指定的行动的时候，网站就应当展示出一个登录页模板。<br>如果你想卖点东西，首先确认你有一个好看的销售页。以一个大标题开始，并且为销售模块留够空间，也可以添加一个销售视频。然后指引用户在页面底部进行购买。<br>11.丰富的社交媒体<br>在博客和页面中限制社交媒体按钮的数量，因为每个按钮都要运行一个脚本，因此页面增加了额外的加载时间。只保留1-5个按钮，例如：Facebook，Twitter，LinkedIn，Pinterest，Google+等这些经常用来分享内容的平台。<br>给你的Facebook页面，Twitter账号和YouTube频道创建社交媒体图像。自定义图片可以立竿见影的让第一次进入的访客喜欢，follow，订阅你的页面。<br>设置Facebook开放图形META标签来确保你的内容可以在Facebook上正确的分享。在别人分享你的主页、博文等的URL的时候，使用Facebook Debugger来检查页面是如何展示的。<br>设置Twitter Cards，使网站的URL被分享的时候，可以让丰富的图片和视频绑定到你的微博上。<br>设置Google+ Snippets来定制你网站分享到Google+上的样式。使用Snippet guide可以生成代码。即使你的网站没有得到很多Google+的喜爱，Google也会因为你正确添加了meta数据从而有一些提升。<br>把网站中链接到个人简介的社交媒体图标藏起来，可以把它们设置的小一点或者将它们放在footer中。社交媒体营销的目的就是将用户引向你的网站，而不是别的什么。</current></established></p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文章最初出版于AwesomeBlog。&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/0tIK8YmulicPoWEibemYzFY4voAR8ZyaaukZKMF44CgiaUfDkYIr1vYzFKKibC1o3Au3WInN9iarRhibQm4uFhz4Sayg/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;原图 by UIchina&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>javaScript知识点总结</title>
    <link href="http://yoursite.com/2016/08/16/js/"/>
    <id>http://yoursite.com/2016/08/16/js/</id>
    <published>2016-08-16T02:55:00.000Z</published>
    <updated>2016-08-16T03:04:20.579Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说，一言不合就上图<br><img src="http://img1.tbcdn.cn/tfscom/T1JBT9XkhjXXb1upjX.jpg" alt="原图 by alimama"><br><a id="more"></a></p>
<p><img src="http://img3.tbcdn.cn/tfscom/T1qtogXc8fXXartXjX.gif" alt="原图 by alimama"></p>
<p><img src="http://img2.tbcdn.cn/tfscom/T10d.hXa0eXXartXjX.gif" alt="原图 by alimama"></p>
<p><img src="http://img3.tbcdn.cn/tfscom/T1ltAjXmXbXXartXjX.gif" alt="原图 by alimama"></p>
<p><img src="http://img2.tbcdn.cn/tfscom/T1wgEiXfVfXXartXjX.gif" alt="原图 by alimama"></p>
<p><img src="http://img3.tbcdn.cn/tfscom/T1GukhXgXcXXartXjX.gif" alt="原图 by alimama"></p>
<p><img src="http://img2.tbcdn.cn/tfscom/T1A1kiXaFaXXartXjX.gif" alt="原图 by alimama"></p>
<p><img src="http://img1.tbcdn.cn/tfscom/T1WoIgXchdXXartXjX.gif" alt="原图 by alimama"></p>
<p><img src="http://img3.tbcdn.cn/tfscom/T1jsshXgRdXXartXjX.gif" alt="原图 by alimama"></p>
<p><img src="http://img3.tbcdn.cn/tfscom/T14Nb_XjNhXXartXjX.gif" alt="原图 by alimama"></p>
<p><img src="http://img3.tbcdn.cn/tfscom/T1AGMiXjRaXXartXjX.gif" alt="原图 by alimama"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话不多说，一言不合就上图&lt;br&gt;&lt;img src=&quot;http://img1.tbcdn.cn/tfscom/T1JBT9XkhjXXb1upjX.jpg&quot; alt=&quot;原图 by alimama&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
